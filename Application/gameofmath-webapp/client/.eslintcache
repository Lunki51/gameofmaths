[{"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/index.js":"1","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/Main_view.js":"2","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/model/authentification.js":"3","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/model/quizModel.js":"4","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/Login_display.js":"5","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/teacher_display.js":"6","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/components/global_components.js":"7","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/Map_display.js":"8","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/overlay_components/chapters_overlay.js":"9","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/overlay_components/castle_overlay.js":"10","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/overlay_components/profil_overlay.js":"11"},{"size":216,"mtime":1615210192785,"results":"12","hashOfConfig":"13"},{"size":6028,"mtime":1617176515799,"results":"14","hashOfConfig":"13"},{"size":981,"mtime":1617176515799,"results":"15","hashOfConfig":"13"},{"size":2026,"mtime":1615210192789,"results":"16","hashOfConfig":"13"},{"size":2254,"mtime":1615210192789,"results":"17","hashOfConfig":"13"},{"size":594,"mtime":1616402639242,"results":"18","hashOfConfig":"13"},{"size":4383,"mtime":1617176515799,"results":"19","hashOfConfig":"13"},{"size":18900,"mtime":1617176515799,"results":"20","hashOfConfig":"13"},{"size":13229,"mtime":1616501096905,"results":"21","hashOfConfig":"13"},{"size":666,"mtime":1617096250147,"results":"22","hashOfConfig":"13"},{"size":4195,"mtime":1617176515799,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"fl9jrf",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/index.js",[],["52","53"],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/Main_view.js",["54","55"],"import React, {Component} from 'react';\n\n//MODEL\nimport auth, {getType, getUsername, isAuth} from \"../../model/authentification\";\n\nimport LoginView from \"./main_components/Login_display\";\nimport {MobileHeader, NavigationBar} from \"./main_components/components/global_components\";\nimport MapView from \"./main_components/Map_display\";\nimport Axios from \"axios\";\nimport {Quiz} from \"./overlay_components/chapters_overlay\";\nimport {TeacherDisplay} from \"./main_components/teacher_display\";\nimport {CastleDetails} from \"./overlay_components/castle_overlay\"\nimport {ProfilDetails} from \"./overlay_components/profil_overlay\";\nimport {quitQuiz} from \"../../model/quizModel\";\n\n/**\n * @author ANtoine LE BORGNE\n *\n * create the main of the app\n */\nclass MainView extends Component {\n\n\n    _isMounted = false\n\n    constructor() {\n\n        super();\n\n\n        this.state = {\n\n            isLogged: () => {\n                isAuth()\n                    .then((res) => {\n                        return res.data.isLogged\n                    })\n            },\n            overlayComponent: null,\n            whatOnOverlay: \"\",\n            mapAccess: true,\n            who: \"\",\n            username: \"\",\n            zoomed: false,\n            details: null,\n        }\n\n\n    }\n\n\n    componentDidMount() {\n\n        this._isMounted = true\n\n\n        //Check if the user is authenticated\n        isAuth()\n            .then((res) => {\n\n                if (this._isMounted) {\n                    if (res.data.returnState === 0) {\n                        if (res.data.isLogged === true) {\n                            document.title = \"Game Of Math\"\n                        }\n\n                        getType().then((response) => {\n\n                            if (response.data.returnState === 0) {\n                                this.setState({\n                                    isLogged: res.data.isLogged,\n                                    who: response.data.type\n                                })\n                            }\n\n                        })\n\n\n                    }\n                }\n            })\n\n    }\n\n\n    //HANDLER\n\n    /**\n     * handle submit button and redirect to the\n     * authentication handler\n     *\n     * @param event mostly onClick\n     */\n    handleLogin = (event) => {\n\n        //get input's form values\n        const username = event.target[0].value\n        const password = event.target[1].value\n\n        //check authentication\n        auth(username, password)\n            .then((response) => {\n                //if wrong password or login\n\n                if (response.data.returnState === 1) {\n                    //TODO put styled error message\n                    alert(response.data.msg)\n\n                } else if (response.data.returnState === 0) {\n                    isAuth()\n                        .then((res) => {\n                            if (res.data.returnState === 0) {\n                                document.title = \"Game Of Math\"\n                                this.setState({\n                                    isLogged: res.data.isLogged,\n                                    who: response.data.type\n                                })\n\n                            }\n                        })\n                }\n\n            })\n\n\n        event.preventDefault();\n\n    }\n\n    /**\n     * handle the logout of the user\n     *\n     */\n    handleLogout = () => {\n\n        Axios.post(\"/api/user/logout\").then((res) => {\n\n            if (res.data.returnState === 0)\n                this.setState({\n                    isLogged: false\n                })\n        })\n    }\n\n    /**\n     *handle the quiz visibility\n     */\n    handleQuizDisplay = () => {\n\n        if (this.state.whatOnOverlay === \"quiz\") {\n\n            document.getElementById('quiz-btn').style.shadowfilter = \"none\"\n\n            this.setState({\n                overlayComponent: null,\n                whatOnOverlay: \"\"\n            })\n        } else {\n            document.getElementById('quiz-btn').style.shadowfilter = \"filter : drop-shadow(0px 0px 0px 3px #fff);\"\n            this.setState({\n                overlayComponent: <Quiz/>,\n                whatOnOverlay: \"quiz\"\n            })\n        }\n\n    }\n\n    handleProfilDisplay = () => {\n        if (this.state.whatOnOverlay === \"quiz\") {\n            this.handleQuizDisplay();\n        }\n        if (this.state.whatOnOverlay === \"profil\") {\n            this.setState({\n                overlayComponent: null,\n                whatOnOverlay: \"\"\n            })\n        } else {\n            this.setState({\n                overlayComponent: <ProfilDetails/>,\n                whatOnOverlay: \"profil\"\n            })\n\n        }\n    }\n\n    handleCastleDetails = (castle) => {\n        this.setState({details: <CastleDetails castle={castle} clear={this.handleClearDetails}/>, zoomed: true})\n        console.log(\"Added details\")\n    }\n\n\n    handleClearDetails = () => {\n        this.setState({details: null, zoomed: false})\n        console.log(\"Removed details\")\n    }\n\n\n    componentWillUnmount() {\n        this._isMounted = false\n    }\n\n\n    render() {\n\n        if (this.state.isLogged === true) {\n            //the user is logged\n\n            if (this.state.who === \"student\") {\n\n                //user is a student\n                return <>\n\n                    <MobileHeader/>{/*appear only when mobile*/}\n                    <NavigationBar quiz={this.handleQuizDisplay} prof={this.handleProfilDisplay}\n                                   logout={this.handleLogout}/>\n                    <MapView details={this.handleCastleDetails} zoomed={this.state.zoomed}/>\n                    {this.state.details}\n                    {this.state.overlayComponent}\n                </>\n\n            } else {\n\n                //user is a teacher\n                return <TeacherDisplay logout={this.handleLogout}/>\n\n            }\n\n        } else {\n\n            //the user is not logged\n            return <LoginView handleLogin={this.handleLogin}/>\n\n        }\n\n\n    }\n\n\n}\n\n\nexport default MainView;","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/model/authentification.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/model/quizModel.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/Login_display.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/teacher_display.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/components/global_components.js",["56","57","58","59","60"],"import React, { Component } from 'react';\nimport \"../../styles/global_style.css\";\nimport {getUsername} from \"../../../../model/authentification\";\n\n\n//IMAGES\n\nconst image_icon_user =  \"https://img.icons8.com/material-outlined/35/eff0cf/user--v1.png\"\nconst image_icon_logout =  \"https://img.icons8.com/ios-filled/35/eff0cf/login-rounded-right.png\"\nconst image_icon_quiz =  \"https://img.icons8.com/ios/35/eff0cf/help.png\"\n\n/**\n * @author Antoine LE BORGNE\n *\n * create a main container component\n */\nclass ContainerTitle extends Component{\n\n    constructor(props){\n        super(props)\n        this.props = props;\n    }\n\n\n    render(){\n\n        return<>\n        \n            <div className={this.props.className}>\n                <h1 className=\"container-title\">{this.props.title}</h1>\n                {this.props.children}\n            </div>\n        \n        </>\n\n    }\n\n\n\n}\n\n\n/**\n * @author Antoine LE BORGNE\n *\n * create a text field component\n */\nclass TextField extends Component {\n\n\n    constructor(props){\n        super(props)\n        this.props = props;\n    }\n\n    render(){\n        return <>\n            <input id={this.props.id} onChange={this.props.onChange} value={this.props.value} className=\"textField\" placeholder={this.props.hint} type={this.props.type}/>\n        </>\n    }\n\n\n}\n\n\n/**\n * @author Antoine LE BORGNE\n *\n * create a simple Button component\n */\nclass Button extends Component{\n\n\n    constructor(props){\n        super(props)\n        this.props = props;\n    }\n\n    render(){\n        return <>\n             <input className=\"button\" type=\"submit\" value={this.props.value} onClick={this.props.onClick}/> \n        </>\n    }\n\n}\n\n\n/**\n * @author Antoine LE BORGNE\n *\n * create the navigation bar\n */\nclass NavigationBar extends Component{\n\n\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.props = props\n\n        this.state = {\n            username : \"\"\n        }\n\n    }\n\n\n    componentDidMount() {\n\n        this._isMounted = true;\n\n            //get the current username\n            getUsername().then((response) => {\n\n                    if(this._isMounted) {\n\n                        this.setState({\n                            username: response.data.username,\n                        })\n\n                    }\n                })\n\n    }\n\n\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n\n    render() {\n        return <NavBar>\n                    <NavElement icon={image_icon_quiz} id=\"quiz-btn\"  className=\"navElem_left\"   onClick={this.props.quiz} value=\"quiz\"/>\n                    <img src={window.location.origin + '/logo/game_of_math_logo.png'} className=\"navElem_center\"/>\n                    <NavElement id=\"profil-btn\" className=\"navElem_right\" onClick={this.props.prof} value={this.state.username}/>\n                    <NavElement icon={image_icon_logout}  className=\"navElem_right\"  onClick={this.props.logout} value=\"deconnexion\"/>\n                </NavBar>\n    }\n\n}\n\n\n/**\n * @author Antoine LE BORGNE\n *\n * handle and display navbar\n */\nexport class NavBar extends Component{\n\n    constructor(props){\n        super(props);\n        this.props = props;\n    }\n\n\n    render(){\n        return <>\n            <ul className=\"navbar_container\">\n                {this.props.children}\n            </ul>\n        </>\n    }\n\n}\n\n/**\n * @author Antoine LE BORGNE\n *\n * manage navigation element\n */\nexport class NavElement extends Component{\n\n\n\n    render() {\n        return <>\n            <li className={this.props.className}>\n\n                <img id={this.props.id} className=\"navbar_link_icon\" onClick={this.props.onClick} src={this.props.icon}/>\n                <a className=\"navbar_link\" onClick={this.props.onClick}>\n                    {this.props.value}\n                </a>\n            </li>\n        </>\n    }\n\n\n}\n\n\nexport class AlertComp extends Component{\n\n\n    render() {\n\n        return <div className=\"alert_container\">\n\n\n\n            <text >{this.props.msg}</text>\n\n            <button value=\"OK\" onClick={this.props.onClick}/>\n\n        </div>\n\n\n    }\n\n}\n\n\n\nexport class MobileHeader extends Component{\n\n    render() {\n\n        return <div className=\"mobile-header-container\">\n\n            <img src={window.location.origin + '/logo/game_of_math_logo.png'} className=\"mobile-header-title\"/>\n\n        </div>\n    }\n\n}\n\n\n\n//exportation\nexport {ContainerTitle, TextField, Button,NavigationBar};","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/Map_display.js",["61","62","63","64","65","66","67"],"import React, {Component} from 'react';\nimport * as THREE from 'three'\nimport {GUI} from \"dat.gui\";\nimport {Water} from \"three/examples/jsm/objects/Water\";\nimport {Sky} from \"three/examples/jsm/objects/Sky\"\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\nimport {BufferGeometryUtils} from 'three/examples/jsm/utils/BufferGeometryUtils';\nimport '../styles/map_style.css'\nimport Axios from \"axios\";\nimport Stats from \"stats.js\"\n\n\n/**\n * @author quentin COSNIER\n * @author Antoine LE BORGNE\n *\n * render map on the screen\n */\nclass MapView extends Component {\n\n    _isMounted = false\n\n\n    constructor(props: P, context: any) {\n        super(props, context);\n\n        this.state = {\n            global: false,\n            renderer: new THREE.WebGLRenderer(),\n            camera: new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 1, 2000),\n            HResScene: new THREE.Scene(),\n            LResScene: new THREE.Scene(),\n            center: new THREE.Vector3(0, 80, 0),\n            sun: new THREE.Vector3(),\n            water: new Water(),\n            stats: new Stats(),\n            able: true,\n            avgFPS: 0,\n            nbFrames: 0,\n            mapDetails: {\n                sizeX: 500,\n                sizeY: 500\n            },\n            currentCastle: 0,\n            castles: [],\n            inputVars: {\n                mousePressed: false,\n                oldTouchX: 0,\n                oldTouchY: 0,\n                rotateX: 0,\n                rotateY: 0,\n                camDistance: 100,\n            }\n        };\n    }\n\n    componentDidMount() {\n        this._isMounted = true\n\n        document.title = \"Game Of Math\"\n\n\n        this.state.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.state.renderer.setPixelRatio(window.devicePixelRatio);\n\n        this.renderMap(null)\n    }\n\n\n    animate = () => {\n\n        let time = Date.now();\n\n        requestAnimationFrame(this.animate);\n        //this.state.stats.begin();\n        if (!this.props.zoomed) {\n            let posX = Math.min(Math.max(-this.state.inputVars.rotateX * 50, -this.state.mapDetails.sizeX), this.state.mapDetails.sizeX);\n            let posY = Math.min(Math.max(-this.state.inputVars.rotateY * 50, -this.state.mapDetails.sizeY), this.state.mapDetails.sizeY);\n            this.state.camera.position.set(posX, 500, posY)\n            this.state.camera.lookAt(new THREE.Vector3(posX, 80, posY))\n        } else {\n            this.state.camera.position.set(this.state.center.x -\n                (this.state.inputVars.camDistance * Math.cos(Math.PI / 4)) * Math.sin(this.state.inputVars.rotateX),\n                (this.state.inputVars.camDistance * Math.sin(Math.PI / 4) + 80),\n                (this.state.center.z - (this.state.inputVars.camDistance * Math.cos(Math.PI / 4)) *\n                    Math.cos(this.state.inputVars.rotateX)))\n            this.state.camera.lookAt(this.state.castles[this.state.currentCastle])\n\n        }\n        this.state.water.material.uniforms['time'].value += 1.0 / 60.0;\n\n\n        if (this.state.able) {\n            this.state.renderer.render(this.state.HResScene, this.state.camera);\n\n            let length = Date.now() - time;\n            if(this.state.nbFrames>10){\n                if(this.state.avgFPS>35){\n                    this.setState({able: false})\n                }\n            }else{\n                if(this.state.avgFPS==0){\n                    this.setState({avgFPS:length})\n                }else{\n                    this.setState({avgFPS:(this.state.avgFPS+length)/2})\n                }\n            }\n        } else {\n            this.state.renderer.render(this.state.LResScene, this.state.camera);\n        }\n        this.setState({nbFrames: this.state.nbFrames+1})\n        //this.state.stats.end();\n    }\n\n    mouseMoveEvent = (event) => {\n        if (this.state.inputVars.mousePressed) {\n            let inputVars = this.state.inputVars;\n            inputVars.rotateX = this.state.inputVars.rotateX + event.movementX / 100;\n            inputVars.rotateY = this.state.inputVars.rotateY + event.movementY / 100;\n            this.setState({\n                inputVars: inputVars\n            })\n        }\n    }\n\n    mouseDownEvent = (event) => {\n        let inputVars = this.state.inputVars;\n        inputVars.mousePressed = true\n        this.setState({inputVars: inputVars})\n\n    }\n\n\n    mouseUpEvent = (event) => {\n        let inputVars = this.state.inputVars;\n        inputVars.mousePressed = false\n        this.setState({inputVars: inputVars})\n        if (!this.props.zoomed) {\n            this.rayCasting((event.clientX / window.innerWidth) * 2 - 1\n                , -(event.clientY / window.innerHeight) * 2 + 1)\n        }\n    }\n\n    mouseWheelEvent = (event) => {\n        if (this.props.zoomed) {\n            let inputVars = this.state.inputVars;\n            inputVars.camDistance = Math.min(Math.max(30, this.state.inputVars.camDistance + event.deltaY), 100)\n            this.setState({\n                inputVars: inputVars\n            })\n        }\n    }\n\n    onTouchMove = (event) => {\n        let inputVars = this.state.inputVars;\n        inputVars.rotateX = this.state.inputVars.rotateX - (this.state.inputVars.oldTouchX - event.touches[0].clientX) / 100;\n        inputVars.rotateY = this.state.inputVars.rotateY - (this.state.inputVars.oldTouchY - event.touches[0].clientY) / 100;\n        inputVars.oldTouchX = event.touches[0].clientX;\n        inputVars.oldTouchY = event.touches[0].clientY;\n        this.setState({\n            inputVars: inputVars\n        })\n    }\n\n    onTouchStart = (event) => {\n        let inputVars = this.state.inputVars;\n        inputVars.oldTouchX = event.touches[0].clientX;\n        inputVars.oldTouchY = event.touches[0].clientY;\n        this.setState({\n            inputVars: inputVars\n        })\n    }\n\n\n    windowResizeEvent = (event) => {\n        this.state.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.setState({\n            camera: new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight\n                , 1, 20000)\n        })\n    }\n\n    setupController() {\n        let domElement = this.state.renderer.domElement;\n        domElement.addEventListener(\"mousedown\", this.mouseDownEvent, false)\n        domElement.addEventListener(\"mouseup\", this.mouseUpEvent, false)\n        domElement.addEventListener(\"mousemove\", this.mouseMoveEvent, false)\n        domElement.addEventListener(\"wheel\", this.mouseWheelEvent, false)\n        window.addEventListener(\"resize\", this.windowResizeEvent)\n    }\n\n\n    rayCasting = (mouseX, mouseY) => {\n        let rayCaster = new THREE.Raycaster();\n        rayCaster.setFromCamera(new THREE.Vector2(mouseX, mouseY), this.state.camera);\n\n        let intersects;\n        if (this.state.able) {\n            intersects = rayCaster.intersectObjects(this.state.HResScene.children);\n        } else {\n            intersects = rayCaster.intersectObjects(this.state.LResScene.children);\n        }\n\n        const regex = new RegExp('^Castle:.$');\n        intersects.forEach(object => {\n            if (regex.test(object.object.name)) {\n                let castleId = object.object.name.split(\":\")[1];\n                this.props.details(castleId)\n                this.setState({currentCastle: castleId, center: this.state.castles[castleId]})\n            }\n        })\n\n    }\n\n\n    loadMap = (data, hightRes) => {\n        let map = data.data\n        let colors = map.colors;\n        for (let color of colors) {\n            let meshColor = color[0];\n            let meshArrays = color[1];\n            let geometry = new THREE.BufferGeometry()\n            geometry.setAttribute('position', new THREE.BufferAttribute(Float32Array.from(meshArrays[0]), 3))\n            geometry.setAttribute('normal', new THREE.BufferAttribute(Float32Array.from(meshArrays[1]), 3));\n            geometry.computeBoundingSphere()\n            let material;\n            if (hightRes) {\n                material = new THREE.MeshStandardMaterial({color: new THREE.Color(meshColor)});\n            } else {\n                material = new THREE.MeshBasicMaterial({color: new THREE.Color(meshColor)});\n            }\n            this.state.HResScene.add(new THREE.Mesh(geometry, new THREE.MeshStandardMaterial({color: new THREE.Color(meshColor)})))\n            this.state.LResScene.add(new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({color: new THREE.Color(meshColor)})))\n        }\n        let gltfLoader = new GLTFLoader();\n        gltfLoader.load(\"mapData/castle.glb\", model => {\n            console.log(model.scene)\n            let castlesPosition = map.castlePosition;\n            for (let position of castlesPosition) {\n                let positionModel = model.scene.clone(true);\n                let vectorPos = new THREE.Vector3(position[0], position[1], position[2]);\n                this.state.castles.push(vectorPos);\n                positionModel.children[0].material.roughness = 0.6\n                positionModel.children[0].material.metalness = 1\n                positionModel.position.set(position[0], position[1], position[2])\n                positionModel.scale.set(0.8, 0.8, 0.8)\n                positionModel.name = \"Castle\"\n\n                let PointLight = new THREE.PointLight(new THREE.Color(255, 255, 0), 0.005, 20)\n                PointLight.position.set(position[0], position[1] + 10, position[2])\n\n\n                const geometry = new THREE.BoxGeometry();\n                let material;\n                if (hightRes) {\n                    material = new THREE.MeshStandardMaterial({color: 0x00ff00});\n                } else {\n                    material = new THREE.MeshBasicMaterial({color: 0x00ff00});\n                }\n                const cube = new THREE.Mesh(geometry, material);\n                cube.name = \"HelperCube\"\n                cube.position.set(position[0], position[1], position[2])\n                cube.scale.set(10, 10, 10);\n                cube.name = \"Castle:\" + this.state.currentCastle;\n                this.setState({currentCastle: this.state.currentCastle + 1})\n                cube.visible = false;\n\n                this.state.HResScene.add(cube.clone())\n                this.state.LResScene.add(cube.clone())\n                let date = new Date(Date.now()).getHours();\n                if(date<8 ||date>20){\n                    this.state.HResScene.add(PointLight)\n                }\n                this.state.HResScene.add(positionModel.clone());\n                this.state.LResScene.add(positionModel.clone());\n            }\n        }, undefined, function (error) {\n\n            console.error(error);\n        })\n\n        this.setupTrees(\"/mapData/forestTree.glb\", map.forestTrees, 0.7, map.castlePosition);\n        this.setupTrees(\"/mapData/savannaTree.glb\", map.savannaTrees, 0.3, map.castlePosition);\n        this.setupTrees(\"/mapData/bush.glb\", map.plainTrees, 0.25, map.castlePosition);\n\n\n    }\n\n    setupTrees = (link, map, scale, castles, highRes) => {\n        let gltfLoader = new GLTFLoader();\n        gltfLoader.load(link, gltf => {\n            let geometries = new Map();\n            let GLTFscene = gltf.scene;\n\n            for (let i = 0; i < GLTFscene.children.length; i++) {\n                geometries.set(GLTFscene.children[i].material.color, [])\n            }\n\n            for (let i = 0; i < map.length; i++) {\n                if(map[i].y<=this.state.water.position.y+1)continue;\n                let valid = true;\n                castles.forEach(castle => {\n                    if ((castle[0] - map[i].x <= 10 && castle[0] - map[i].x >= -10) && (castle[2] - map[i].z <= 10 && castle[2] - map[i].z >= -10)) {\n                        valid = false;\n                    }\n                })\n                if (valid) {\n                    let randRot = Math.random() * Math.PI * 2;\n                    for (let j = 0; j < GLTFscene.children.length; j++) {\n                        let childObject = GLTFscene.children[j];\n\n                        let childGeometry = new THREE.InstancedBufferGeometry();\n                        THREE.BufferGeometry.prototype.copy.call(childGeometry, childObject.geometry);\n\n                        let childMat = childObject.material;\n\n                        childGeometry.scale(childObject.scale.x, childObject.scale.y, childObject.scale.z)\n                        childGeometry.rotateX(childObject.rotation.x);\n                        childGeometry.rotateY(childObject.rotation.y);\n                        childGeometry.rotateZ(childObject.rotation.z);\n                        childGeometry.translate(childObject.position.x, childObject.position.y, childObject.position.z)\n                        childGeometry.scale(scale, scale, scale)\n\n                        childGeometry.rotateY(randRot)\n                        childGeometry.translate(map[i].x, map[i].y, map[i].z)\n                        geometries.get(childMat.color).push(childGeometry)\n                    }\n                }\n            }\n\n            for (let key of geometries.keys()) {\n                let geometryArray = geometries.get(key);\n                let geometry = BufferGeometryUtils.mergeBufferGeometries(geometryArray, false)\n                let material;\n                this.state.LResScene.add( new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({color: key})));\n                this.state.HResScene.add( new THREE.Mesh(geometry, new THREE.MeshStandardMaterial({color: key})));\n            }\n\n        }, undefined, error => {\n            console.error(error)\n        });\n    }\n\n    setupWater = () => {\n        let waterGeometry = new THREE.PlaneBufferGeometry(10000, 10000);\n\n        this.setState({\n            water: new Water(\n                waterGeometry,\n                {\n                    textureWidth: 512,\n                    textureHeight: 512,\n                    waterNormals: new THREE.TextureLoader().load('mapData/waternormals.jpg', function (texture) {\n\n                        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n                    }),\n                    alpha: 5.0,\n                    sunDirection: new THREE.Vector3(0, -1, 0),\n                    sunColor: 0xffffff,\n                    waterColor: 0x001e0f,\n                    distortionScale: 3.7,\n                }\n            )\n        })\n\n        let water = new Water(\n            waterGeometry,\n            {\n                textureWidth: 512,\n                textureHeight: 512,\n                waterNormals: new THREE.TextureLoader().load('mapData/waternormals.jpg', function (texture) {\n\n                    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n\n                }),\n                alpha: 5.0,\n                sunDirection: new THREE.Vector3(0, -1, 0),\n                sunColor: 0xffffff,\n                waterColor: 0x001e0f,\n                distortionScale: 3.7,\n            }\n        )\n\n        water.rotation.set(-Math.PI / 2, this.state.water.rotation.y, this.state.water.rotation.z)\n        water.position.set(this.state.water.position.x, 80, this.state.water.position.z)\n\n        this.state.water.rotation.set(-Math.PI / 2, this.state.water.rotation.y, this.state.water.rotation.z)\n        this.state.water.position.set(this.state.water.position.x, 80, this.state.water.position.z)\n\n        this.state.HResScene.add(this.state.water);\n        this.state.LResScene.add(water);\n    }\n    setupSky = () => {\n        this.setState({sky: new Sky()});\n        this.state.sky.scale.setScalar(450000);\n        this.state.HResScene.add(this.state.sky.clone());\n        this.state.LResScene.add(this.state.sky.clone());\n\n        const skyUniforms = this.state.sky.material.uniforms;\n\n        skyUniforms['turbidity'].value = 0.5;\n        skyUniforms['rayleigh'].value = 0.3;\n        skyUniforms['mieCoefficient'].value = 0.005;\n        skyUniforms['mieDirectionalG'].value = 0.8;\n\n        let date = new Date(Date.now()).getHours();\n        date = date-8<=0?24-date:date-8\n        if(date==0)date=24;\n\n        this.setState({\n            sunParameters: {\n                inclination: 0,\n                azimuth: date/24\n            },\n            pmremGenerator: new THREE.PMREMGenerator(this.state.renderer)\n        })\n\n        this.updateSun();\n    }\n\n    updateSun = () => {\n\n        const theta = Math.PI * (this.state.sunParameters.inclination - 0.5);\n        const phi = 2 * Math.PI * (this.state.sunParameters.azimuth - 0.5);\n\n        this.state.sun.set(Math.cos(phi), Math.sin(phi) * Math.sin(theta), Math.sin(phi) * Math.cos(theta))\n\n        this.state.sky.material.uniforms['sunPosition'].value.copy(this.state.sun);\n        this.state.water.material.uniforms['sunDirection'].value.copy(this.state.sun).normalize();\n        this.state.HResScene.environment = this.state.pmremGenerator.fromScene(this.state.sky).texture;\n        this.state.LResScene.environment = this.state.pmremGenerator.fromScene(this.state.sky).texture;\n    }\n\n    setupGui = () => {\n        const waterUniforms = this.state.water.material.uniforms;\n        let skyUniforms = this.state.sky.material.uniforms;\n\n        waterUniforms.size.value = 100;\n        const gui = new GUI()\n        const folderSky = gui.addFolder('Sky');\n        folderSky.add(this.state.sunParameters, 'inclination', 0, 0.5, 0.0001).onChange(this.updateSun);\n        folderSky.add(this.state.sunParameters, 'azimuth', 0, 1, 0.0001).onChange(this.updateSun);\n\n        folderSky.add(skyUniforms.turbidity, 'value', 0, 5, 0.01).onChange(this.updateSun).name('turbidity')\n        folderSky.add(skyUniforms.rayleigh, 'value', 0, 5, 0.01).onChange(this.updateSun).name('rayleigh')\n        folderSky.add(skyUniforms.mieCoefficient, 'value', 0, 5, 0.01).onChange(this.updateSun).name('mieCoefficient')\n        folderSky.add(skyUniforms.mieDirectionalG, 'value', 0, 5, 0.01).onChange(this.updateSun).name('mieDirectionalG')\n    }\n\n\n    reloadScene = () => {\n        Axios.get(\"api/graphics/map\").then(response => {\n            this.state.HResScene.clear();\n            this.state.LResScene.clear();\n            this.loadMap(response, this.state.able);\n\n\n            this.setupWater();\n            this.setupSky();\n            //this.setupGui();\n\n            this.mount.appendChild(this.state.renderer.domElement);\n            //this.mount.appendChild(this.state.stats.dom)\n            //this.state.stats.showPanel(0);\n\n\n            this.animate();\n        })\n    }\n\n    /**\n     * render a class's map\n     *\n     * @param displayClass the target class\n     */\n    renderMap = (displayClass) => {\n\n        if (this.mount) {\n            this.setupController();\n\n            this.reloadScene();\n\n        }\n    }\n\n\n    componentWillUnmount() {\n        this._isMounted = false\n    }\n\n    render() {\n        return <div class={\"mapView\"} onTouchMove={this.onTouchMove} onTouchStart={this.onTouchStart}\n                    ref={ref => (this.mount = ref)}/>\n\n    }\n\n}\n\nexport default MapView","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/overlay_components/chapters_overlay.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/overlay_components/castle_overlay.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/overlay_components/profil_overlay.js",["68","69","70","71","72","73","74"],"import React, { Component } from 'react';\nimport * as THREE from 'three'\nimport { FBXLoader } from '../../../../node_modules/three/examples/jsm/loaders/FBXLoader.js';\nimport { TGALoader } from '../../../../node_modules/three/examples/jsm/loaders/TGALoader';\nimport { OrbitControls } from '../../../../node_modules/three/examples/jsm/controls/OrbitControls.js';\nimport '../styles/global_style.css'\nimport auth, {getInfo, getType, getUsername, isAuth} from \"../../../model/authentification\";\nimport '../styles/global_variables.css';\n\nexport class ProfilDetails extends Component{\n\n    _isMounted=false\n\n\n    constructor(props: P, context: any) {\n        super(props, context);\n        this.state = {\n            player: {firstname:\"\", lastname:\"\", className:\"\", classGrade:\"\", classID:0, mp:0},\n            scene: new THREE.Scene(),\n            renderer: new THREE.WebGLRenderer(),\n            mixer: null,\n            camera: new THREE.PerspectiveCamera( 45, 500/500, 1, 2000 ),\n            clock: new THREE.Clock(),\n            controls: null\n        }\n        getInfo().then(response =>{\n            this.setState({player : response.data})\n            console.log(this.state.player)\n        })\n    }\n\n    animate = () => {\n\n        requestAnimationFrame( this.animate );\n\n        const delta = this.state.clock.getDelta();\n\n        if ( this.state.mixer ) this.state.mixer.update( delta );\n        this.state.controls.update();\n\n        this.state.renderer.render( this.state.scene, this.state.camera );\n\n    }\n\n    render3D = () =>{\n        //NO\n        /*\n        if(this.mount){\n\n            const manager = new THREE.LoadingManager();\n            manager.addHandler( /\\.tga$/i, new TGALoader() );\n            let loader = new FBXLoader(manager);\n            this.state.camera.position.set(0,0,0)\n            this.state.scene.add(new THREE.Mesh(new THREE.BoxGeometry(1,1),new THREE.MeshBasicMaterial({color:0x252525})))\n            this.state.camera.position.set( 100, 200, 300 );\n\n\n            loader.load('userData/sylvanas.fbx',object =>{\n\n                this.setState({mixer : new THREE.AnimationMixer( object )})\n\n                const action = this.state.mixer.clipAction( object.animations[ 0 ] );\n                action.play();\n\n                console.log(object)\n\n                object.traverse( function ( child ) {\n\n                    if ( child.isMesh ) {\n                        if(child.material){\n                            child.material.transparent = false\n                            child.material.opacity = 1.0\n                        }\n                        child.castShadow = true;\n                        child.receiveShadow = true;\n\n                    }\n\n                } );\n                this.state.scene.add( object );\n            })\n            const dirLight = new THREE.DirectionalLight( 0xffffff );\n            dirLight.position.set( 0, 200, 100 );\n            dirLight.castShadow = true;\n            dirLight.shadow.camera.top = 180;\n            dirLight.shadow.camera.bottom = - 100;\n            dirLight.shadow.camera.left = - 120;\n            dirLight.shadow.camera.right = 120;\n            this.state.scene.add( dirLight );\n\n            this.state.controls = new OrbitControls( this.state.camera, this.state.renderer.domElement );\n            this.state.controls.target.set( 0, 0, 0 );\n            this.state.controls.update();\n\n\n            this.mount.appendChild(this.state.renderer.domElement);\n            this.animate();\n        }\n         */\n    }\n\n    componentDidMount() {\n        this._isMounted=true\n        /*\n        this.state.renderer.setSize(500,500);\n        this.state.renderer.setPixelRatio(window.devicePixelRatio);\n        this.render3D(null)\n         */\n    }\n\n    componentWillUnmount() {\n        this._isMounted=false\n    }\n\n\n\n    render() {\n\n        //TODO Implement player description\n        return <div className=\"container-chapter-selection\">\n\n            <h1 className=\"profil-details-headline\">Joueur : {this.state.player.firstname} {this.state.player.lastname}</h1>\n            <h1>Classe: {this.state.player.className}</h1>\n            <h1>Points de math : {this.state.player.mp}</h1>\n\n        </div>\n\n    }\n\n\n\n\n}",["75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":4,"column":24,"nodeType":"83","messageId":"84","endLine":4,"endColumn":35},{"ruleId":"81","severity":1,"message":"85","line":14,"column":9,"nodeType":"83","messageId":"84","endLine":14,"endColumn":17},{"ruleId":"81","severity":1,"message":"86","line":8,"column":7,"nodeType":"83","messageId":"84","endLine":8,"endColumn":22},{"ruleId":"87","severity":1,"message":"88","line":137,"column":21,"nodeType":"89","endLine":137,"endColumn":115},{"ruleId":"87","severity":1,"message":"88","line":182,"column":17,"nodeType":"89","endLine":182,"endColumn":122},{"ruleId":"90","severity":1,"message":"91","line":183,"column":17,"nodeType":"89","endLine":183,"endColumn":73},{"ruleId":"87","severity":1,"message":"88","line":222,"column":13,"nodeType":"89","endLine":222,"endColumn":112},{"ruleId":"92","severity":1,"message":"93","line":90,"column":9,"nodeType":"94","endLine":90,"endColumn":51},{"ruleId":"95","severity":1,"message":"96","line":102,"column":37,"nodeType":"97","messageId":"98","endLine":102,"endColumn":39},{"ruleId":"81","severity":1,"message":"99","line":230,"column":17,"nodeType":"83","messageId":"84","endLine":230,"endColumn":25},{"ruleId":"81","severity":1,"message":"100","line":334,"column":21,"nodeType":"83","messageId":"84","endLine":334,"endColumn":29},{"ruleId":"95","severity":1,"message":"96","line":409,"column":16,"nodeType":"97","messageId":"98","endLine":409,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":431,"column":9,"nodeType":"94","endLine":431,"endColumn":29},{"ruleId":"92","severity":1,"message":"93","line":432,"column":9,"nodeType":"94","endLine":432,"endColumn":29},{"ruleId":"81","severity":1,"message":"101","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":19},{"ruleId":"81","severity":1,"message":"102","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":19},{"ruleId":"81","severity":1,"message":"103","line":5,"column":10,"nodeType":"83","messageId":"84","endLine":5,"endColumn":23},{"ruleId":"81","severity":1,"message":"104","line":7,"column":8,"nodeType":"83","messageId":"84","endLine":7,"endColumn":12},{"ruleId":"81","severity":1,"message":"105","line":7,"column":24,"nodeType":"83","messageId":"84","endLine":7,"endColumn":31},{"ruleId":"81","severity":1,"message":"82","line":7,"column":33,"nodeType":"83","messageId":"84","endLine":7,"endColumn":44},{"ruleId":"81","severity":1,"message":"106","line":7,"column":46,"nodeType":"83","messageId":"84","endLine":7,"endColumn":52},{"ruleId":"77","replacedBy":"107"},{"ruleId":"79","replacedBy":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'getUsername' is defined but never used.","Identifier","unusedVar","'quitQuiz' is defined but never used.","'image_icon_user' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'material' is assigned a value but never used.","'material' is defined but never used.","'FBXLoader' is defined but never used.","'TGALoader' is defined but never used.","'OrbitControls' is defined but never used.","'auth' is defined but never used.","'getType' is defined but never used.","'isAuth' is defined but never used.",["109"],["110"],"no-global-assign","no-unsafe-negation"]