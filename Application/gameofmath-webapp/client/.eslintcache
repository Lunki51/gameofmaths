[{"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/index.js":"1","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/Main_view.js":"2","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/model/authentification.js":"3","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/teacher_display.js":"4","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/Login_display.js":"5","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/model/quizModel.js":"6","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/components/global_components.js":"7","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/Map_display.js":"8","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/overlay_components/chapters_overlay.js":"9"},{"size":216,"mtime":1610040167905,"results":"10","hashOfConfig":"11"},{"size":4855,"mtime":1610040930476,"results":"12","hashOfConfig":"11"},{"size":820,"mtime":1610040930476,"results":"13","hashOfConfig":"11"},{"size":594,"mtime":1610040167905,"results":"14","hashOfConfig":"11"},{"size":2254,"mtime":1610040167905,"results":"15","hashOfConfig":"11"},{"size":2026,"mtime":1610383900877,"results":"16","hashOfConfig":"11"},{"size":4395,"mtime":1610383900877,"results":"17","hashOfConfig":"11"},{"size":9639,"mtime":1610448800923,"results":"18","hashOfConfig":"11"},{"size":13228,"mtime":1610383900877,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1u0h2vq",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/index.js",[],["42","43"],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/Main_view.js",["44"],"import React, {Component} from 'react';\n\n//MODEL\nimport auth, {getType, isAuth} from \"../../model/authentification\";\n\nimport LoginView from \"./main_components/Login_display\";\nimport {MobileHeader, NavigationBar} from \"./main_components/components/global_components\";\nimport MapView from \"./main_components/Map_display\";\nimport Axios from \"axios\";\nimport {Quiz} from \"./overlay_components/chapters_overlay\";\nimport {TeacherDisplay} from \"./main_components/teacher_display\";\nimport {quitQuiz} from \"../../model/quizModel\";\n\n/**\n * @author ANtoine LE BORGNE\n *\n * create the main of the app\n */\nclass MainView extends Component {\n\n\n    _isMounted = false\n\n    constructor() {\n\n        super();\n\n\n        this.state = {\n\n            isLogged: () => {\n                isAuth()\n                    .then((res) => {\n                        return res.data.isLogged\n                    })\n            },\n            overlayComponent: null,\n            whatOnOverlay: \"\",\n            mapAccess: true,\n            who: \"\",\n            username: \"\",\n\n        }\n\n\n    }\n\n\n    componentDidMount() {\n\n        this._isMounted = true\n\n\n        //Check if the user is authenticated\n        isAuth()\n            .then((res) => {\n\n                if (this._isMounted) {\n                    if (res.data.returnState === 0) {\n                        if (res.data.isLogged === true) {\n                            document.title = \"Game Of Math\"\n                        }\n\n                        getType().then((response) => {\n\n                            if(response.data.returnState === 0){\n                                this.setState({\n                                    isLogged: res.data.isLogged,\n                                    who:response.data.type\n                                })\n                            }\n\n                        })\n\n\n                    }\n                }\n            })\n\n    }\n\n\n    //HANDLER\n\n    /**\n     * handle submit button and redirect to the\n     * authentication handler\n     *\n     * @param event mostly onClick\n     */\n    handleLogin = (event) => {\n\n        //get input's form values\n        const username = event.target[0].value\n        const password = event.target[1].value\n\n        //check authentication\n        auth(username, password)\n            .then((response) => {\n                //if wrong password or login\n\n                if (response.data.returnState === 1) {\n                    //TODO put styled error message\n                    alert(response.data.msg)\n\n                } else if (response.data.returnState === 0) {\n                    isAuth()\n                        .then((res) => {\n                            if (res.data.returnState === 0) {\n                                document.title = \"Game Of Math\"\n                                this.setState({\n                                    isLogged: res.data.isLogged,\n                                    who: response.data.type\n                                })\n\n                            }\n                        })\n                }\n\n            })\n\n\n        event.preventDefault();\n\n    }\n\n    /**\n     * handle the logout of the user\n     *\n     */\n    handleLogout = () => {\n\n        Axios.post(\"/api/user/logout\").then((res) => {\n\n            if (res.data.returnState === 0)\n                this.setState({\n                    isLogged: false\n                })\n        })\n    }\n\n    /**\n     *handle the quiz visibility\n     */\n    handleQuizDisplay = () => {\n\n        if (this.state.whatOnOverlay === \"quiz\") {\n\n            document.getElementById('quiz-btn').style.shadowfilter = \"none\"\n\n            this.setState({\n                overlayComponent: null,\n                whatOnOverlay: \"\"\n\n            })\n        } else {\n            document.getElementById('quiz-btn').style.shadowfilter = \"filter : drop-shadow(0px 0px 0px 3px #fff);\"\n            this.setState({\n                overlayComponent: <Quiz/>,\n                whatOnOverlay: \"quiz\"\n            })\n        }\n\n    }\n\n\n\n\n    componentWillUnmount() {\n        this._isMounted = false\n    }\n\n\n    render() {\n\n        if (this.state.isLogged === true) {\n            //the user is logged\n\n            if (this.state.who === \"student\") {\n\n                //user is a student\n                return <>\n\n                    <MobileHeader/>{/*appear only when mobile*/}\n                    <NavigationBar quiz={this.handleQuizDisplay} logout={this.handleLogout}/>\n                    <MapView/>\n                    {this.state.overlayComponent}\n                </>\n\n            } else {\n\n                //user is a teacher\n                return <TeacherDisplay logout={this.handleLogout}/>\n\n            }\n\n        } else {\n\n            //the user is not logged\n            return <LoginView handleLogin={this.handleLogin}/>\n\n        }\n\n\n    }\n\n\n}\n\n\nexport default MainView;","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/model/authentification.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/teacher_display.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/Login_display.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/model/quizModel.js",[],"/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/components/global_components.js",["45","46","47","48"],"import React, { Component } from 'react';\nimport \"../../styles/global_style.css\";\nimport {getUsername} from \"../../../../model/authentification\";\n\n\n//IMAGES\n\nconst image_icon_user =  \"https://img.icons8.com/material-outlined/35/eff0cf/user--v1.png\"\nconst image_icon_logout =  \"https://img.icons8.com/ios-filled/35/eff0cf/login-rounded-right.png\"\nconst image_icon_quiz =  \"https://img.icons8.com/ios/35/eff0cf/help.png\"\n\n/**\n * @author Antoine LE BORGNE\n *\n * create a main container component\n */\nclass ContainerTitle extends Component{\n\n    constructor(props){\n        super(props)\n        this.props = props;\n    }\n\n\n    render(){\n\n        return<>\n        \n            <div className={this.props.className}>\n                <h1 className=\"container-title\">{this.props.title}</h1>\n                {this.props.children}\n            </div>\n        \n        </>\n\n    }\n\n\n\n}\n\n\n/**\n * @author Antoine LE BORGNE\n *\n * create a text field component\n */\nclass TextField extends Component {\n\n\n    constructor(props){\n        super(props)\n        this.props = props;\n    }\n\n    render(){\n        return <>\n            <input id={this.props.id} onChange={this.props.onChange} value={this.props.value} className=\"textField\" placeholder={this.props.hint} type={this.props.type}/>\n        </>\n    }\n\n\n}\n\n\n/**\n * @author Antoine LE BORGNE\n *\n * create a simple Button component\n */\nclass Button extends Component{\n\n\n    constructor(props){\n        super(props)\n        this.props = props;\n    }\n\n    render(){\n        return <>\n             <input className=\"button\" type=\"submit\" value={this.props.value} onClick={this.props.onClick}/> \n        </>\n    }\n\n}\n\n\n/**\n * @author Antoine LE BORGNE\n *\n * create the navigation bar\n */\nclass NavigationBar extends Component{\n\n\n    _isMounted = false;\n\n    constructor(props) {\n        super(props);\n        this.props = props\n\n        this.state = {\n            username : \"\"\n        }\n\n    }\n\n\n    componentDidMount() {\n\n        this._isMounted = true;\n\n            //get the current username\n            getUsername().then((response) => {\n\n                    if(this._isMounted) {\n\n                        this.setState({\n                            username: response.data.username,\n                        })\n\n                    }\n                })\n\n    }\n\n\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n\n    render() {\n        return <NavBar>\n                    <NavElement icon={image_icon_quiz} id=\"quiz-btn\"  className=\"navElem_left\"   onClick={this.props.quiz} value=\"quiz\"/>\n                    <img src={window.location.origin + '/logo/game_of_math_logo.png'} className=\"navElem_center\"/>\n                    <NavElement icon={image_icon_user}  className=\"navElem_right\"  onClick={this.props.profile} value={this.state.username}/>\n                    <NavElement icon={image_icon_logout}  className=\"navElem_right\"  onClick={this.props.logout} value=\"deconnexion\"/>\n                </NavBar>\n    }\n\n}\n\n\n/**\n * @author Antoine LE BORGNE\n *\n * handle and display navbar\n */\nexport class NavBar extends Component{\n\n    constructor(props){\n        super(props);\n        this.props = props;\n    }\n\n\n    render(){\n        return <>\n            <ul className=\"navbar_container\">\n                {this.props.children}\n            </ul>\n        </>\n    }\n\n}\n\n/**\n * @author Antoine LE BORGNE\n *\n * manage navigation element\n */\nexport class NavElement extends Component{\n\n\n\n    render() {\n        return <>\n            <li className={this.props.className}>\n\n                <img id={this.props.id} className=\"navbar_link_icon\" onClick={this.props.onClick} src={this.props.icon}/>\n                <a className=\"navbar_link\" onClick={this.props.onClick}>\n                    {this.props.value}\n                </a>\n            </li>\n        </>\n    }\n\n\n}\n\n\nexport class AlertComp extends Component{\n\n\n    render() {\n\n        return <div className=\"alert_container\">\n\n\n\n            <text >{this.props.msg}</text>\n\n            <button value=\"OK\" onClick={this.props.onClick}/>\n\n        </div>\n\n\n    }\n\n}\n\n\n\nexport class MobileHeader extends Component{\n\n    render() {\n\n        return <div className=\"mobile-header-container\">\n\n            <img src={window.location.origin + '/logo/game_of_math_logo.png'} className=\"mobile-header-title\"/>\n\n        </div>\n    }\n\n}\n\n\n\n//exportation\nexport {ContainerTitle, TextField, Button,NavigationBar};","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/main_components/Map_display.js",["49","50"],"import React, {Component} from 'react';\nimport Axios from \"axios\";\nimport * as THREE from 'three'\nimport {GUI} from \"dat.gui\";\nimport {Water} from \"three/examples/jsm/objects/Water2\";\n\n\n/**\n * @author quentin COSNIER\n * @author Antoine LE BORGNE\n *\n * render map on the screen\n */\nclass MapView extends Component {\n\n    _isMounted = false\n\n    componentDidMount() {\n        this._isMounted = true\n        document.title = \"Game Of Math\"\n\n        this.renderMap(null)\n    }\n\n\n    /**\n     * render a class's map\n     *\n     * @param displayClass the target class\n     */\n    renderMap = (displayClass) => {\n\n        if (this.mount) {\n\n            Axios.get(\"/api/graphics/map\").then(r => {\n\n                const renderer = new THREE.WebGLRenderer();\n                renderer.setSize(window.innerWidth, window.innerHeight);\n                let camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000);\n                renderer.outputEncoding = THREE.sRGBEncoding;\n                renderer.shadowMap.enabled = true;\n                let scene = new THREE.Scene();\n                scene.background = new THREE.Color(\"#000000\")\n                let mousePressed = false;\n                let rotateX = 0, rotateY = 0;\n                let scrolled = 100;\n                let camDistance = 0;\n                var center = new THREE.Vector3(0, 0, 0)\n                //VARS\n\n                //INPUTS\n                renderer.domElement.addEventListener(\"mousedown\", function (event) {\n                    mousePressed = true;\n                    if (event.shiftKey) rayCasting((event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1)\n                }, false)\n                renderer.domElement.addEventListener(\"mouseup\", function (event) {\n                    mousePressed = false;\n                }, false)\n                renderer.domElement.addEventListener(\"mousemove\", function (event) {\n                    if (mousePressed) {\n                        rotateX += event.movementX / 100;\n                        rotateY += event.movementY / 100;\n                    }\n                }, false)\n                document.addEventListener(\"wheel\", function (event) {\n                    scrolled -= event.deltaY\n                }, false)\n                window.addEventListener(\"resize\", function (event) {\n                    renderer.setSize(window.innerWidth, window.innerHeight);\n                    camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000);\n                })\n                //INPUTS\n\n                //METHODS\n\n                function rayCasting(mouseX, mouseY) {\n                    console.log(\"RayCasting\" + mouseX + \":\" + mouseY)\n                    let rayCaster = new THREE.Raycaster();\n                    rayCaster.setFromCamera(new THREE.Vector2(mouseX, mouseY), camera);\n\n                    let intersects = rayCaster.intersectObjects(scene.children);\n                    console.log(intersects)\n                    if (intersects[0]) {\n                        center = intersects[0].point\n                    }\n                }\n\n\n                //RENDERING METHOD\n                const animate = function () {\n                    requestAnimationFrame(animate);\n                    camDistance -= scrolled;\n                    camDistance = Math.max(20, camDistance)\n                    camDistance = Math.min(100, camDistance)\n                    camera.position.z = center.z - (camDistance * Math.cos(Math.PI / 4)) * Math.cos(rotateX)\n                    camera.position.x = center.x - (camDistance * Math.cos(Math.PI / 4)) * Math.sin(rotateX)\n                    camera.position.y = camDistance * Math.sin(Math.PI / 4) + 80\n                    camera.lookAt(center)\n                    scrolled = 0\n                    renderer.render(scene, camera);\n\n\n                }\n                //RENDERING METHOD\n\n                //DATA COMPUTATION\n                scene.clear();\n                let map = r.data\n                let triangles = map.vertices\n                for (let color of triangles) {\n                    let trianglesData = color[1]\n                    let trianglesColor = color[0]\n                    let geometry = new THREE.BufferGeometry()\n                    let pointsArray = new Float32Array(trianglesData.length * 3 * 3)\n                    let normalsArray = new Float32Array(trianglesData.length * 3 * 3)\n                    for (let i = 0; i < trianglesData.length; i++) {\n                        let points = [];\n                        for (let j = 0; j < trianglesData[i].length; j++) {\n                            points[j] = new THREE.Vector3(trianglesData[i][j].x - map.sizeX / 2, trianglesData[i][j].z, Math.round(trianglesData[i][j].y*100)/100 - map.sizeY / 2)\n                            pointsArray[i * 9 + j * 3] = points[j].x\n                            pointsArray[i * 9 + j * 3 + 1] = points[j].y\n                            pointsArray[i * 9 + j * 3 + 2] = points[j].z\n                        }\n                        let ab = new THREE.Vector3()\n                        let cb = new THREE.Vector3()\n                        ab.subVectors(points[0], points[1])\n                        cb.subVectors(points[2], points[1])\n                        cb.cross(ab)\n                        cb.normalize()\n                        for (let j = 0; j < 3; j++) {\n                            normalsArray[i * 9 + j * 3] = cb.x\n                            normalsArray[i * 9 + j * 3 + 1] = cb.y\n                            normalsArray[i * 9 + j * 3 + 2] = cb.z\n                        }\n\n                    }\n                    console.table(pointsArray)\n                    geometry.setAttribute('normal', new THREE.BufferAttribute(normalsArray, 3))\n                    geometry.setAttribute('position', new THREE.BufferAttribute(pointsArray, 3));\n                    geometry.computeBoundingSphere()\n                    let material = new THREE.MeshLambertMaterial({color: trianglesColor});\n                    let mesh = new THREE.Mesh(geometry, material)\n                    mesh.castShadow = true;\n                    mesh.receiveShadow = true;\n                    scene.add(mesh)\n\n\n\n                }\n                //DATA COMPUTATION\n\n                //ENVIRONMENT\n                const geometry = new THREE.PlaneGeometry(1000, 1000);\n                let water = new Water(geometry,{color: 0x2389da,\n                    scale: 1000,\n                    flowDirection: new THREE.Vector2( 1, 1 ),\n                    textureWidth: 1024,\n                    textureHeight: 1024\n                } )\n                water.rotation.x = 3*Math.PI/2\n                water.position.y=80\n                scene.add(water);\n                scene.fog = new THREE.FogExp2(\"#8BA6BB\", 0.001)\n                scene.background = new THREE.Color(0x87ceeb)\n\n                let planeGeo = new THREE.PlaneBufferGeometry(1000, 1000);\n                let mat = new THREE.MeshBasicMaterial({color : 0xc2b280,side: THREE.DoubleSide })\n                let planeMesh = new THREE.Mesh(planeGeo,mat)\n                planeMesh.rotation.x = Math.PI/2\n                planeMesh.position.y  = 0\n                scene.add(planeMesh)\n\n\n                const dirLight = new THREE.DirectionalLight(0xffffff, 1);\n                dirLight.color.setHSL(0.1, 1, 0.95);\n                dirLight.position.multiplyScalar(30);\n                scene.add(dirLight);\n\n                dirLight.castShadow = true;\n\n                dirLight.shadow.mapSize.width = 2048;\n                dirLight.shadow.mapSize.height = 2048;\n\n                const d = 50;\n\n                dirLight.shadow.camera.left = -d;\n                dirLight.shadow.camera.right = d;\n                dirLight.shadow.camera.top = d;\n                dirLight.shadow.camera.bottom = -d;\n\n                dirLight.shadow.camera.far = 1000;\n                dirLight.shadow.bias = -0.0001;\n\n                const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\n                scene.add(dirLightHelper);\n\n                const light = new THREE.PointLight(0xffffff,1)\n                scene.add(light)\n\n                const loader = new THREE.CubeTextureLoader();\n                loader.setPath( 'mapData/texture/' );\n\n                const textureCube = loader.load( [\n                    'right.png', 'left.png',\n                    'top.png', 'bottom.png',\n                    'center.png', 'back.png'\n                ] ,function(text){\n                    scene.background = text\n                });\n\n                const gui = new GUI()\n                const cubeFolder = gui.addFolder(\"Light\")\n                cubeFolder.add(water.position,\"x\",0,100,1)\n                cubeFolder.add(water.position,\"y\",0,100,1)\n                cubeFolder.add(water.position,\"z\",0,100,1)\n                cubeFolder.add(water.rotation,\"x\",-Math.PI*2,Math.PI*2,0.01)\n                cubeFolder.add(water.rotation,\"y\",-Math.PI*2,Math.PI*2,0.01)\n                cubeFolder.add(water.rotation,\"z\",-Math.PI*2,Math.PI*2,0.01)\n                cubeFolder.add(dirLight.position, \"y\", 0, 500, 1)\n                cubeFolder.add(dirLight, \"intensity\", 0, 100, 0.01)\n                cubeFolder.open()\n                //ENVIRONMENT\n\n                this.mount.appendChild(renderer.domElement);\n\n                //RENDERING\n                animate();\n            })\n\n\n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false\n    }\n\n    render() {\n\n        return <div ref={ref => (this.mount = ref)}/>\n\n    }\n\n}\n\nexport default MapView","/media/chokearth/Chokearth/INFO2/M3302-M4106/gameofmaths-groupe-b/Application/gameofmath-webapp/client/src/views/main_view/overlay_components/chapters_overlay.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":12,"column":9,"nodeType":"57","messageId":"58","endLine":12,"endColumn":17},{"ruleId":"59","severity":1,"message":"60","line":137,"column":21,"nodeType":"61","endLine":137,"endColumn":115},{"ruleId":"59","severity":1,"message":"60","line":182,"column":17,"nodeType":"61","endLine":182,"endColumn":122},{"ruleId":"62","severity":1,"message":"63","line":183,"column":17,"nodeType":"61","endLine":183,"endColumn":73},{"ruleId":"59","severity":1,"message":"60","line":222,"column":13,"nodeType":"61","endLine":222,"endColumn":112},{"ruleId":"55","severity":1,"message":"64","line":62,"column":25,"nodeType":"57","messageId":"58","endLine":62,"endColumn":32},{"ruleId":"55","severity":1,"message":"65","line":203,"column":23,"nodeType":"57","messageId":"58","endLine":203,"endColumn":34},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'quitQuiz' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'rotateY' is assigned a value but never used.","'textureCube' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]