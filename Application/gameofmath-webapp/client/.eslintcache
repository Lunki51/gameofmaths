[{"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\index.js":"1","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\Main_view.js":"2","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\authentification.js":"3","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\Login_display.js":"4","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\global_components.js":"5","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\Map_display.js":"6","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\teacher_display_2.0.js":"7","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\overlay_components\\chapters_overlay.js":"8","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\quizModel.js":"9","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\student_display.js":"10","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\default_display.js":"11","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\classes_display.js":"12","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\adding_display.js":"13","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\search_display.js":"14","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\edit_display.js":"15","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\delete_display.js":"16","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\classModel.js":"17","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\studentModel.js":"18","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\chapterModel.js":"19","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\searchModel.js":"20","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\ClassDisplay.js":"21","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\StudentManagement.js":"22","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\question_display.js":"23"},{"size":224,"mtime":1616667464089,"results":"24","hashOfConfig":"25"},{"size":6103,"mtime":1617125953283,"results":"26","hashOfConfig":"25"},{"size":870,"mtime":1616667464090,"results":"27","hashOfConfig":"25"},{"size":2307,"mtime":1616667480229,"results":"28","hashOfConfig":"25"},{"size":5085,"mtime":1616667480229,"results":"29","hashOfConfig":"25"},{"size":13750,"mtime":1616667480229,"results":"30","hashOfConfig":"25"},{"size":5813,"mtime":1617280268489,"results":"31","hashOfConfig":"25"},{"size":13797,"mtime":1616667464103,"results":"32","hashOfConfig":"25"},{"size":5125,"mtime":1617125917569,"results":"33","hashOfConfig":"25"},{"size":4683,"mtime":1617294684265,"results":"34","hashOfConfig":"25"},{"size":1691,"mtime":1616667480233,"results":"35","hashOfConfig":"25"},{"size":3624,"mtime":1617280375096,"results":"36","hashOfConfig":"25"},{"size":24523,"mtime":1617126058947,"results":"37","hashOfConfig":"25"},{"size":4920,"mtime":1617285884154,"results":"38","hashOfConfig":"25"},{"size":16346,"mtime":1617125953291,"results":"39","hashOfConfig":"25"},{"size":24471,"mtime":1617125918306,"results":"40","hashOfConfig":"25"},{"size":678,"mtime":1616667480227,"results":"41","hashOfConfig":"25"},{"size":1581,"mtime":1617125960165,"results":"42","hashOfConfig":"25"},{"size":490,"mtime":1616667480227,"results":"43","hashOfConfig":"25"},{"size":225,"mtime":1617125953314,"results":"44","hashOfConfig":"25"},{"size":6281,"mtime":1616667480231,"results":"45","hashOfConfig":"25"},{"size":2519,"mtime":1616667480231,"results":"46","hashOfConfig":"25"},{"size":8224,"mtime":1617297078067,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"14cocvn",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\index.js",[],["103","104"],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\Main_view.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\authentification.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\Login_display.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\global_components.js",["105","106","107","108","109"],"import React, { Component } from 'react';\r\nimport \"../../styles/global_style.css\";\r\nimport {getUsername} from \"../../../../model/authentification\";\r\n\r\n\r\n//IMAGES\r\n\r\nconst image_icon_user =  \"https://img.icons8.com/material-outlined/35/eff0cf/user--v1.png\"\r\nconst image_icon_logout =  \"https://img.icons8.com/ios-filled/35/eff0cf/login-rounded-right.png\"\r\nconst image_icon_quiz =  \"https://img.icons8.com/ios/35/eff0cf/help.png\"\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * create a main container component\r\n */\r\nclass ContainerTitle extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.props = props;\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return<>\r\n        \r\n            <div className={this.props.className}>\r\n                <img className=\"container-title\" src={window.location.origin + \"/logo/game_of_math_logo.png\"}/>\r\n                {this.props.children}\r\n            </div>\r\n        \r\n        </>\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * create a text field component\r\n */\r\nclass TextField extends Component {\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.props = props;\r\n    }\r\n\r\n    render(){\r\n        return <>\r\n            <input id={this.props.id} onChange={this.props.onChange} value={this.props.value} className=\"textField\" placeholder={this.props.hint} type={this.props.type}/>\r\n        </>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * create a simple Button component\r\n */\r\nclass Button extends Component{\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.props = props;\r\n    }\r\n\r\n    render(){\r\n        return <>\r\n             <input className=\"button\" type=\"submit\" value={this.props.value} onClick={this.props.onClick}/> \r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * create the navigation bar\r\n */\r\nclass NavigationBar extends Component{\r\n\r\n\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props\r\n\r\n        this.state = {\r\n            username : \"\"\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this._isMounted = true;\r\n\r\n            //get the current username\r\n            getUsername().then((response) => {\r\n\r\n                    if(this._isMounted) {\r\n\r\n                        this.setState({\r\n                            username: response.data.username,\r\n                        })\r\n\r\n                    }\r\n                })\r\n\r\n    }\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    render() {\r\n        return <NavBar>\r\n                    <NavElement icon={image_icon_quiz} id=\"quiz-btn\"  className=\"navElem_left\"   onClick={this.props.quiz} value=\"quiz\"/>\r\n                    <img src={window.location.origin + '/logo/banner_gom.png'} className=\"navElem_center\"/>\r\n                    <NavElement icon={image_icon_user}  className=\"navElem_right\"  onClick={this.props.profile} value={this.state.username}/>\r\n                    <NavElement icon={image_icon_logout}  className=\"navElem_right\"  onClick={this.props.logout} value=\"deconnexion\"/>\r\n                </NavBar>\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * handle and display navbar\r\n */\r\nexport class NavBar extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n\r\n    render(){\r\n        return <>\r\n            <ul className=\"navbar_container\">\r\n                {this.props.children}\r\n            </ul>\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * manage navigation element\r\n */\r\nexport class NavElement extends Component{\r\n\r\n\r\n    render() {\r\n        return <>\r\n            <li className={this.props.className}>\r\n\r\n                <img id={this.props.id} className=\"navbar_link_icon\" onClick={this.props.onClick} src={this.props.icon}/>\r\n                <a className=\"navbar_link\" onClick={this.props.onClick}>\r\n                    {this.props.value}\r\n                </a>\r\n            </li>\r\n        </>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport class Warning extends Component{\r\n\r\n\r\n    render() {\r\n\r\n        return <div className=\"alert_container\">\r\n            <text className=\"warning_msg\">{this.props.msg}</text>\r\n\r\n            <div className=\"warning_btn_section\">\r\n            {(this.props.cancel) ?\r\n                <>\r\n                    <button className=\"warning_ok_btn\"  onClick={this.props.okClick}>Ok</button>\r\n                    <button className=\"warning_cancel_btn\" onClick={this.props.cancel}>Annuler</button>\r\n                </>\r\n                :\r\n                <button className=\"warning_ok_btn\" onClick={this.props.okClick}>OK</button>\r\n            }\r\n            </div>\r\n        </div>\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport class MobileHeader extends Component{\r\n\r\n    render() {\r\n\r\n        return <div className=\"mobile-header-container\">\r\n\r\n            <img src={window.location.origin + '/logo/game_of_math_logo.png'} className=\"mobile-header-title\"/>\r\n\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n//exportation\r\nexport {ContainerTitle, TextField, Button,NavigationBar};","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\Map_display.js",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"import React, {Component} from 'react';\r\nimport * as THREE from 'three'\r\nimport {Color, MeshStandardMaterial} from 'three'\r\nimport {GUI} from \"dat.gui\";\r\nimport {Water} from \"three/examples/jsm/objects/Water\";\r\nimport {Sky} from \"three/examples/jsm/objects/Sky\"\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport {BufferGeometryUtils} from 'three/examples/jsm/utils/BufferGeometryUtils';\r\nimport Axios from \"axios\";\r\nimport Stats from \"stats.js\"\r\n\r\n\r\n/**\r\n * @author quentin COSNIER\r\n * @author Antoine LE BORGNE\r\n *\r\n * render map on the screen\r\n */\r\nclass MapView extends Component {\r\n\r\n    _isMounted = false\r\n\r\n\r\n    constructor(props: P, context: any) {\r\n        super(props, context);\r\n\r\n        this.state = {\r\n            renderer: new THREE.WebGLRenderer(),\r\n            camera: new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 1, 2000),\r\n            scene: new THREE.Scene(),\r\n            center: new THREE.Vector3(0, 80, 0),\r\n            sun: new THREE.Vector3(),\r\n            water: new Water(),\r\n            stats: new Stats(),\r\n            currentCastle: 0,\r\n            castles: new Array(),\r\n            inputVars: {\r\n                mousePressed: false,\r\n                rotateX: 0,\r\n                rotateY: 0,\r\n                scrolled: 100,\r\n                camDistance: 0\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true\r\n\r\n        document.title = \"Game Of Math\"\r\n\r\n\r\n        this.state.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.state.renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n\r\n        this.renderMap(null)\r\n    }\r\n\r\n\r\n    animate = () => {\r\n\r\n        requestAnimationFrame(this.animate);\r\n        this.state.stats.begin();\r\n        this.state.inputVars.camDistance -= this.state.inputVars.scrolled;\r\n        this.state.inputVars.camDistance = Math.min(Math.max(30, this.state.inputVars.camDistance), 100)\r\n        this.state.camera.position.z = this.state.center.z - (this.state.inputVars.camDistance * Math.cos(Math.PI / 4)) * Math.cos(this.state.inputVars.rotateX)\r\n        this.state.camera.position.x = this.state.center.x - (this.state.inputVars.camDistance * Math.cos(Math.PI / 4)) * Math.sin(this.state.inputVars.rotateX)\r\n        this.state.camera.position.y = this.state.inputVars.camDistance * Math.sin(Math.PI / 4) + 80\r\n        this.state.camera.lookAt(this.state.center)\r\n        this.state.inputVars.scrolled = 0\r\n        this.state.water.material.uniforms['time'].value += 1.0 / 60.0;\r\n        this.state.renderer.render(this.state.scene, this.state.camera);\r\n        this.state.stats.end();\r\n    }\r\n\r\n    mouseMoveEvent = (event) => {\r\n        if (this.state.inputVars.mousePressed) {\r\n            this.state.inputVars.rotateX += event.movementX / 100;\r\n            this.state.inputVars.rotateY += event.movementY / 100;\r\n        }\r\n    }\r\n\r\n    mouseDownEvent = (event) => {\r\n        this.state.inputVars.mousePressed = true;\r\n        //if (event.shiftKey) this.rayCasting((event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1) #ENABLE SHIFT CLICK MOVE THE CAMERA CENTER\r\n    }\r\n\r\n\r\n    mouseUpEvent = (event) => {\r\n        this.state.inputVars.mousePressed = false;\r\n    }\r\n\r\n    mouseWheelEvent = (event) => {\r\n        this.state.inputVars.scrolled -= event.deltaY\r\n    }\r\n\r\n    windowResizeEvent = (event) => {\r\n        this.state.renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.state.camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 1, 20000);\r\n    }\r\n\r\n    keyDownEvent = (event) =>{\r\n        if(event.key==\"ArrowLeft\"){\r\n            if(this.state.currentCastle>0){\r\n                this.state.currentCastle--;\r\n            }else{\r\n                this.state.currentCastle = this.state.castles.length-1;\r\n            }\r\n            this.state.center = this.state.castles[this.state.currentCastle];\r\n        }else if(event.key==\"ArrowRight\"){\r\n            if(this.state.currentCastle<this.state.castles.length-1){\r\n                this.state.currentCastle++;\r\n            }else{\r\n                this.state.currentCastle = 0;\r\n            }\r\n            this.state.center = this.state.castles[this.state.currentCastle];\r\n        }\r\n    }\r\n\r\n    setupController() {\r\n        let domElement = this.state.renderer.domElement;\r\n        domElement.addEventListener(\"mousedown\", this.mouseDownEvent, false)\r\n        domElement.addEventListener(\"mouseup\", this.mouseUpEvent, false)\r\n        domElement.addEventListener(\"mousemove\", this.mouseMoveEvent, false)\r\n        domElement.addEventListener(\"wheel\", this.mouseWheelEvent, false)\r\n        window.addEventListener(\"keydown\",this.keyDownEvent);\r\n        window.addEventListener(\"resize\", this.windowResizeEvent)\r\n    }\r\n\r\n\r\n    rayCasting = (mouseX, mouseY) => {\r\n        let rayCaster = new THREE.Raycaster();\r\n        rayCaster.setFromCamera(new THREE.Vector2(mouseX, mouseY), this.state.camera);\r\n\r\n        let intersects = rayCaster.intersectObjects(this.state.scene.children);\r\n\r\n        if (intersects[0]) {\r\n            this.state.center = intersects[0].point;\r\n        }\r\n    }\r\n\r\n\r\n    loadMap = (data) => {\r\n        let map = data.data\r\n        let colors = map.colors;\r\n        for (let color of colors) {\r\n            let meshColor = color[0];\r\n            let meshArrays = color[1];\r\n            let geometry = new THREE.BufferGeometry()\r\n            geometry.setAttribute('position', new THREE.BufferAttribute(Float32Array.from(meshArrays[0]), 3))\r\n            geometry.setAttribute('normal', new THREE.BufferAttribute(Float32Array.from(meshArrays[1]), 3));\r\n            geometry.computeBoundingSphere()\r\n            let material = new THREE.MeshStandardMaterial({color: new THREE.Color(meshColor)});\r\n            let mesh = new THREE.Mesh(geometry, material);\r\n            this.state.scene.add(mesh);\r\n        }\r\n        let gltfLoader = new GLTFLoader();\r\n        gltfLoader.load(\"mapData/castle.glb\", model => {\r\n            let castlesPosition = map.castlePosition;\r\n            for (let position of castlesPosition) {\r\n                let positionModel = model.scene.clone(true);\r\n                let vectorPos = new THREE.Vector3(position[0], position[1], position[2]);\r\n                this.state.castles.push(vectorPos);\r\n                this.state.center = vectorPos;\r\n                this.state.currentCastle++;\r\n                positionModel.position.set(position[0], position[1], position[2])\r\n\r\n                positionModel.scale.set(0.5, 0.5, 0.5)\r\n\r\n                let PointLight = new THREE.PointLight(new Color(255, 255, 0), 0.005, 20)\r\n                PointLight.position.set(position[0], position[1] + 10, position[2])\r\n                this.state.scene.add(PointLight)\r\n                this.state.scene.add(positionModel)\r\n            }\r\n        }, undefined, function (error) {\r\n\r\n            console.error(error);\r\n        })\r\n\r\n        this.setupTrees(\"/mapData/forestTree.glb\",map.forestTrees,0.7,map.castlePosition);\r\n        this.setupTrees(\"/mapData/savannaTree.glb\",map.savannaTrees,0.3,map.castlePosition);\r\n        this.setupTrees(\"/mapData/bush.glb\",map.plainTrees,0.25,map.castlePosition);\r\n    }\r\n\r\n    setupTrees = (link,map,scale,castles) =>{\r\n        let gltfLoader = new GLTFLoader();\r\n        gltfLoader.load(link, gltf => {\r\n            let geometries = new Map();\r\n            let GLTFscene = gltf.scene;\r\n\r\n            for (let i = 0; i < GLTFscene.children.length; i++) {\r\n                geometries.set(GLTFscene.children[i].material.color, new Array())\r\n            }\r\n\r\n            for (let i = 0; i < map.length; i++) {\r\n                let valid = true;\r\n                castles.forEach(castle => {\r\n                    if((castle[0]-map[i].x<=10 && castle[0]-map[i].x>=-10) && (castle[2]-map[i].z<=10 && castle[2]-map[i].z>=-10)){\r\n                        valid = false;\r\n                    }\r\n                })\r\n                if(valid){\r\n                    let randRot = Math.random() * Math.PI * 2;\r\n                    for (let j = 0; j < GLTFscene.children.length; j++) {\r\n                        let childObject = GLTFscene.children[j];\r\n\r\n                        let childGeometry = new THREE.InstancedBufferGeometry();\r\n                        THREE.BufferGeometry.prototype.copy.call(childGeometry, childObject.geometry);\r\n\r\n                        let childMat = childObject.material;\r\n\r\n                        childGeometry.scale(childObject.scale.x,childObject.scale.y,childObject.scale.z)\r\n                        childGeometry.rotateX(childObject.rotation.x);\r\n                        childGeometry.rotateY(childObject.rotation.y);\r\n                        childGeometry.rotateZ(childObject.rotation.z);\r\n                        childGeometry.translate(childObject.position.x, childObject.position.y, childObject.position.z)\r\n                        childGeometry.scale(scale, scale, scale)\r\n\r\n                        childGeometry.rotateY(randRot)\r\n                        childGeometry.translate(map[i].x, map[i].y, map[i].z)\r\n                        geometries.get(childMat.color).push(childGeometry)\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let key of geometries.keys()) {\r\n                let geometryArray = geometries.get(key);\r\n                let geometry = BufferGeometryUtils.mergeBufferGeometries(geometryArray, false)\r\n                let mesh = new THREE.Mesh(geometry, new MeshStandardMaterial({color: key}))\r\n                this.state.scene.add(mesh)\r\n            }\r\n\r\n        }, undefined, error => {\r\n            console.error(error)\r\n        });\r\n    }\r\n\r\n    setupWater = () => {\r\n        let waterGeometry = new THREE.PlaneBufferGeometry(10000, 10000);\r\n\r\n        this.state.water = new Water(\r\n            waterGeometry,\r\n            {\r\n                textureWidth: 512,\r\n                textureHeight: 512,\r\n                waterNormals: new THREE.TextureLoader().load('mapData/waternormals.jpg', function (texture) {\r\n\r\n                    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\r\n\r\n                }),\r\n                alpha: 5.0,\r\n                sunDirection: new THREE.Vector3(0, -1, 0),\r\n                sunColor: 0xffffff,\r\n                waterColor: 0x001e0f,\r\n                distortionScale: 3.7\r\n            }\r\n        );\r\n\r\n        this.state.water.rotation.x = -Math.PI / 2;\r\n        this.state.water.position.y = 80;\r\n\r\n        this.state.scene.add(this.state.water);\r\n    }\r\n    setupSky = () => {\r\n        this.state.sky = new Sky();\r\n        this.state.sky.scale.setScalar(450000);\r\n        this.state.scene.add(this.state.sky);\r\n\r\n        const skyUniforms = this.state.sky.material.uniforms;\r\n\r\n        skyUniforms['turbidity'].value = 5;\r\n        skyUniforms['rayleigh'].value = 0.3;\r\n        skyUniforms['mieCoefficient'].value = 0.005;\r\n        skyUniforms['mieDirectionalG'].value = 0.8;\r\n\r\n        this.state.sunParameters = {\r\n            inclination: 0,\r\n            azimuth: 0.205\r\n        };\r\n\r\n        this.state.pmremGenerator = new THREE.PMREMGenerator(this.state.renderer);\r\n\r\n        this.updateSun();\r\n    }\r\n\r\n    updateSun = () => {\r\n        const theta = Math.PI * (this.state.sunParameters.inclination - 0.5);\r\n        const phi = 2 * Math.PI * (this.state.sunParameters.azimuth - 0.5);\r\n\r\n        this.state.sun.x = Math.cos(phi);\r\n        this.state.sun.y = Math.sin(phi) * Math.sin(theta);\r\n        this.state.sun.z = Math.sin(phi) * Math.cos(theta);\r\n\r\n        this.state.sky.material.uniforms['sunPosition'].value.copy(this.state.sun);\r\n        this.state.water.material.uniforms['sunDirection'].value.copy(this.state.sun).normalize();\r\n\r\n        this.state.scene.environment = this.state.pmremGenerator.fromScene(this.state.sky).texture;\r\n\r\n    }\r\n\r\n    setupGui = () => {\r\n        const waterUniforms = this.state.water.material.uniforms;\r\n        let skyUniforms = this.state.sky.material.uniforms;\r\n\r\n        waterUniforms.size.value = 100;\r\n        const gui = new GUI()\r\n        const folderSky = gui.addFolder('Sky');\r\n        folderSky.add(this.state.sunParameters, 'inclination', 0, 0.5, 0.0001).onChange(this.updateSun);\r\n        folderSky.add(this.state.sunParameters, 'azimuth', 0, 1, 0.0001).onChange(this.updateSun);\r\n\r\n        folderSky.add(skyUniforms.turbidity, 'value', 0, 5, 0.01).onChange(this.updateSun).name('turbidity')\r\n        folderSky.add(skyUniforms.rayleigh, 'value', 0, 5, 0.01).onChange(this.updateSun).name('rayleigh')\r\n        folderSky.add(skyUniforms.mieCoefficient, 'value', 0, 5, 0.01).onChange(this.updateSun).name('mieCoefficient')\r\n        folderSky.add(skyUniforms.mieDirectionalG, 'value', 0, 5, 0.01).onChange(this.updateSun).name('mieDirectionalG')\r\n    }\r\n\r\n\r\n    reloadScene = () => {\r\n        Axios.get(\"api/graphics/map\").then(response => {\r\n            this.state.scene.clear();\r\n\r\n            this.loadMap(response);\r\n\r\n\r\n            this.setupWater();\r\n            this.setupSky();\r\n            this.setupGui();\r\n\r\n            this.mount.appendChild(this.state.renderer.domElement);\r\n            this.mount.appendChild(this.state.stats.dom)\r\n            this.state.stats.showPanel(0);\r\n\r\n            this.animate();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * render a class's map\r\n     *\r\n     * @param displayClass the target class\r\n     */\r\n    renderMap = (displayClass) => {\r\n\r\n        if (this.mount) {\r\n            this.setupController();\r\n\r\n            this.reloadScene();\r\n\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div ref={ref => (this.mount = ref)}/>\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default MapView","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\teacher_display_2.0.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\overlay_components\\chapters_overlay.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\quizModel.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\student_display.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\default_display.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\classes_display.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\adding_display.js",["146","147","148","149","150","151"],"import {Component} from \"react\";\r\nimport {createClass, getAllClasses} from \"../../../../../model/classModel\";\r\nimport {createStudent, getAllStudents, getAllTheStudents} from \"../../../../../model/studentModel\";\r\nimport {StudentDisplay} from \"./student_display\";\r\nimport {createChapter,getAllChapter} from \"../../../../../model/chapterModel\";\r\nimport {addQuestion, createAnswer, createQuiz, deleteQuestion, getQuizList} from \"../../../../../model/quizModel\";\r\n\r\nexport class AddingDisplay extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentStepScreen: null\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            currentStepScreen: <AddSelectStep redirect={this.props.redirect} openPopup={this.handleOpenPopup}\r\n                                              previous={this.handlePrevious} next={this.handleNext}/>\r\n        })\r\n    }\r\n\r\n    handleOpenPopup = (Object) => {\r\n        this.props.openPopup(Object)\r\n    }\r\n\r\n    handleNext = (nextStepDOMObject) => {\r\n        this.setState({\r\n            currentStepScreen: nextStepDOMObject\r\n        })\r\n    }\r\n\r\n    handlePrevious = (previousDomObject) => {\r\n        this.setState({\r\n            currentStepScreen: previousDomObject\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return <div className=\"teacher-default-dashboard-container\">\r\n\r\n            <div className=\"teacher-adding-step-container\">\r\n                {this.state.currentStepScreen}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n/////////////////////////| SELECTION STEP |///////////////////////\r\n\r\nclass AddSelectStep extends Component{\r\n\r\n    // final variables\r\n    STUDENT_TEXT = \"Un élève\"\r\n    CLASS_TEXT = \"Une classe\"\r\n    CHAPTER_TEXT = \"Un Chapitre\"\r\n    QUESTION_TEXT = \"Une Question\"\r\n    QUIZ_TEXT = \"Un Quiz\"\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentChoice: \"\",\r\n            currentChoiceDOM:null,\r\n        }\r\n    }\r\n\r\n\r\n    handleConfirmChoice = () => {\r\n\r\n        switch (this.state.currentChoice) {\r\n            case this.STUDENT_TEXT:\r\n\r\n                this.props.next(<AddStudentStep redirect={this.props.redirect} openPopup={this.props.openPopup}\r\n                                                closePopup={this.props.closePopup} next={this.props.next}\r\n                                                previous={this.props.previous}/>)\r\n\r\n                break\r\n            case this.CLASS_TEXT:\r\n\r\n                this.props.next(<AddClassStep redirect={this.props.redirect} openPopup={this.props.openPopup}\r\n                                              closePopup={this.props.closePopup} next={this.props.next}\r\n                                              previous={this.props.previous}/>)\r\n                break\r\n            case this.CHAPTER_TEXT:\r\n\r\n                this.props.next(<AddChapterStep redirect={this.props.redirect} openPopup={this.props.openPopup}\r\n                                                closePopup={this.props.closePopup} next={this.props.next}\r\n                                                previous={this.props.previous}/>)\r\n                break\r\n            case this.QUESTION_TEXT:\r\n\r\n                this.props.next(<AddQuestionStep redirect={this.props.redirect} openPopup={this.props.openPopup}\r\n                                                closePopup={this.props.closePopup} next={this.props.next}\r\n                                                previous={this.props.previous}/>)\r\n\r\n                break\r\n            case this.QUIZ_TEXT:\r\n\r\n                this.props.next(<AddQuizStep redirect={this.props.redirect} openPopup={this.props.openPopup}\r\n                                                 closePopup={this.props.closePopup} next={this.props.next}\r\n                                                 previous={this.props.previous}/>)\r\n\r\n                break\r\n            default:\r\n\r\n\r\n                break\r\n        }\r\n\r\n    }\r\n\r\n    handleSelectChoice = (event, text,id) => {\r\n        let domObject = document.getElementById(id);\r\n        if(!this.state.currentChoiceDOM){\r\n\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM :domObject,\r\n                currentChoice: text\r\n            })\r\n        }else{\r\n            this.state.currentChoiceDOM.style.backgroundColor = \"var(--primary_color)\"\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM :domObject,\r\n                currentChoice: text\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return <div className=\"teacher-selection-container\">\r\n\r\n            <h1 className=\"teacher-add-choice-title\">Ajouter</h1>\r\n\r\n            <div className=\"teacher-selection-option-list\">\r\n                <SelectionChoice id=\"student\" onClick={this.handleSelectChoice} title={this.STUDENT_TEXT}  />\r\n                <SelectionChoice id=\"class\" onClick={this.handleSelectChoice} title={this.CLASS_TEXT} />\r\n                <SelectionChoice id=\"chapter\" onClick={this.handleSelectChoice} title={this.CHAPTER_TEXT} />\r\n                <SelectionChoice id=\"quiz\" onClick={this.handleSelectChoice} title={this.QUIZ_TEXT} />\r\n                <SelectionChoice id=\"question\" onClick={this.handleSelectChoice} title={this.QUESTION_TEXT} />\r\n\r\n            </div>\r\n\r\n            <button onClick={this.handleConfirmChoice} className=\"teacher-next-btn\" >Suivant</button>\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\nclass SelectionChoice extends Component{\r\n\r\n\r\n    handleClick = (event) =>{\r\n        this.props.onClick(event, this.props.title, this.props.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div id={this.props.id} onClick={this.handleClick} className=\"teacher-selection-choice-container\">\r\n            <h1 className=\"teacher-selection-choice-text\">{this.props.title}</h1>\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n////////////////////////| ADDING STUDENT |//////////////////////////\r\n\r\nclass AddStudentStep extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            classesList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getClasses()\r\n    }\r\n\r\n    getClasses = () =>{\r\n        getAllClasses().then((response) => {\r\n\r\n            this.setState({\r\n                classesList:response.data.classes\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        let valid = true;\r\n        let selectedClass = document.getElementById(\"selected-class\")\r\n        let login = document.getElementById(\"select-login\")\r\n        let name = document.getElementById(\"select-name\")\r\n        let firstname = document.getElementById(\"select-firstname\")\r\n        if(selectedClass.value === \"empty\"){\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Aucunne classe selectionné\")\r\n        }\r\n\r\n        if(login.value.length < 4){\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Login - taille minimum de 4\")\r\n        }\r\n\r\n        if(name.value === \"\"){\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Nom - obligatoire\")\r\n        }\r\n\r\n        if(firstname.value === \"\"){\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Prénom - obligatoire\")\r\n        }\r\n\r\n\r\n        if(valid){\r\n            createStudent(selectedClass.value, login.value, name.value, firstname.value).then((response) => {\r\n\r\n                if(response.data.returnState === 0){\r\n\r\n                    alert(\"Elève inserer\")\r\n                    alert(\"mot de passe: \" + response.data.password)\r\n\r\n                    login.value = \"\";\r\n                    name.value = \"\";\r\n                    firstname.value = \"\";\r\n\r\n                    console.log(response)\r\n                    //  this.props.redirect(<StudentDisplay formCreate={{studentID:response.data.student.userID, classID:response.data.student.theClass}}/>);\r\n                } else {\r\n                    //TODO error msg\r\n                    alert(response.data.msg)\r\n                }\r\n\r\n            })\r\n        }\r\n\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<AddSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-add-student-step\">\r\n\r\n            <form className=\"teacher-student-creation-container\" onSubmit={this.handleValidate}>\r\n                <select className=\"teacher-student-creation-input\" id=\"selected-class\">\r\n                    <option className=\"teacher-student-creation-option\" value=\"empty\">Choix de la classe</option>\r\n                    {this.state.classesList.map((theClass, index) => {\r\n                        return <option key={index} value={theClass.classID}>{theClass.name}</option>\r\n                    })}\r\n                </select>\r\n\r\n                <input className=\"teacher-student-creation-input\" id=\"select-login\" placeholder=\"Login\" type=\"text\"/>\r\n                <input className=\"teacher-student-creation-input\" id=\"select-name\" placeholder=\"Nom\" type=\"text\"/>\r\n                <input className=\"teacher-student-creation-input\" id=\"select-firstname\" placeholder=\"Prénom\" type=\"text\"/>\r\n                <input className=\"teacher-student-creation-valid\" type=\"submit\" value=\"Valider\"/>\r\n            </form>\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n//////////////////////////////////| ADDING CLASSES |////////////////////////////////////\r\n\r\nclass AddClassStep extends Component{\r\n\r\n\r\n    handleValidate = (event) => {\r\n\r\n        let valid = true;\r\n        let name = document.getElementById(\"select-name\").value\r\n        let grade = document.getElementById(\"select-grade\").value\r\n\r\n\r\n        if(name === \"\"){\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Nom - obligatoire!\")\r\n        }\r\n\r\n        if(grade === \"\"){\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Niveau - obligatoire!\")\r\n        }\r\n\r\n\r\n        if(valid){\r\n           createClass(name, grade).then((res) => {\r\n\r\n               console.log(res)\r\n\r\n           })\r\n        }\r\n\r\n\r\n\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<AddSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-add-student-step\">\r\n\r\n            <form className=\"teacher-student-creation-container\" onSubmit={this.handleValidate}>\r\n\r\n                <input className=\"teacher-student-creation-input\" id=\"select-name\" placeholder=\"Nom\" type=\"text\"/>\r\n                <input className=\"teacher-student-creation-input\" id=\"select-grade\" placeholder=\"Niveau\" type=\"text\"/>\r\n                <input className=\"teacher-student-creation-valid\" type=\"submit\" value=\"Valider\"/>\r\n            </form>\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n//////////////////////////////////| ADDING CHAPTER |////////////////////////////////////\r\n\r\nclass AddChapterStep extends Component {\r\n\r\n\r\n    handleValidate = (event) => {\r\n\r\n        let valid = true;\r\n        let name = document.getElementById(\"select-name\").value;\r\n\r\n\r\n        if (name === \"\") {\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Nom - obligatoire\")\r\n\r\n        }\r\n        if (valid) {\r\n            createChapter(name).then((res) => {\r\n\r\n                console.log(res)\r\n\r\n            })\r\n        }\r\n\r\n        //no reload\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<AddSelectStep previous={this.props.previous} next={this.props.next}/>)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-add-chapter-step\">\r\n\r\n            <form className=\"teacher-chapter-creation-container\" onSubmit={this.handleValidate}>\r\n\r\n                <input className=\"teacher-chapter-creation-input\" id=\"select-name\" placeholder=\"Nom\" type=\"text\"/>\r\n                <input className=\"teacher-chapter-creation-valid\" type=\"submit\" value=\"Valider\"/>\r\n\r\n            </form>\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\">Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n////////////////////////| ADDING QUESTION |//////////////////////////\r\n\r\nclass AddQuestionStep extends Component{\r\n\r\n    //TODO - Régler problème suppression réponse\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentChapter: 1,\r\n            chaptersList: [],\r\n            quizList: [],\r\n            currentQuiz: null,\r\n            answerList: [],\r\n            isValid: false,\r\n            selectedFile: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        getAllChapter().then(res => {\r\n            this.setState({\r\n                chaptersList: res.data.chapters,\r\n            })\r\n\r\n            getQuizList(res.data.chapters[0].chapterID).then(result => {\r\n                this.setState({\r\n                    quizList: result.data.quizzes\r\n                })\r\n\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    handleUpdateList = (event) => {\r\n\r\n        getAllChapter().then(res => {\r\n            this.setState({\r\n                chapterList: res.data.chapters,\r\n                currentChapter: event.target.value,\r\n            })\r\n\r\n            getQuizList(event.target.value).then(result => {\r\n                this.setState({\r\n                    quizList: result.data.quizzes\r\n                })\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    handleUpdateQuizList = (event) => {\r\n        this.setState({\r\n            currentQuiz: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSwitch = () => {\r\n        let isValid = document.getElementById(\"toggle-switch\")\r\n\r\n        if(isValid && isValid.style.backgroundColor === \"var(--secondary_color)\"){\r\n            isValid.style.backgroundColor = \"var(--primary_color)\"\r\n            this.setState({\r\n                isValid: true\r\n            })\r\n        }else{\r\n            isValid.style.backgroundColor = \"var(--secondary_color)\"\r\n            this.setState({\r\n                isValid: false\r\n            })\r\n        }\r\n    }\r\n\r\n    handleAddAnswer = () => {\r\n        let answerText = document.getElementById(\"select-textAnswer\").value\r\n        let isValid = !this.state.isValid\r\n        let tab = this.state.answerList\r\n\r\n        tab.push({answerText: answerText, isValid: isValid})\r\n        this.setState({\r\n            answerList: tab\r\n        })\r\n\r\n        console.log(this.state.answerList)\r\n    }\r\n\r\n    handleDeleteAnswer = (event,theAnswer) => {\r\n\r\n        this.setState({\r\n            answerList: this.state.answerList.filter(function(aAnswer, index, arr){\r\n                return aAnswer !== theAnswer;\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        let valid = true;\r\n        let upperText = document.getElementById(\"select-upperText\").value\r\n        let lowerText = document.getElementById(\"select-lowerText\").value\r\n        let image = document.getElementById(\"select-image\").value\r\n        let level = document.getElementById(\"select-level\").value\r\n        let qNumber = document.getElementById(\"select-qNumber\").value\r\n\r\n        let type = 'OPEN'\r\n\r\n        if(this.state.answerList.length > 1) {\r\n            let nbValidAnswer = 0\r\n            type = 'QCU'\r\n            this.state.answerList.forEach(answer => {\r\n                if(answer.isValid){\r\n                    nbValidAnswer++\r\n                }\r\n            })\r\n            console.log(nbValidAnswer)\r\n            if(nbValidAnswer > 1){\r\n                type = 'QCM'\r\n            }\r\n        }\r\n\r\n        if(valid){\r\n            addQuestion(this.state.currentChapter,qNumber,this.state.currentQuiz,upperText,lowerText,type,level).then((response) => {\r\n                console.log(response)\r\n                this.state.answerList.forEach(answer => {\r\n                    createAnswer(this.state.currentQuiz, response, answer.answerText, answer.isValid).then(r  =>{\r\n                        console.log(r)\r\n                    })\r\n                })\r\n            })\r\n\r\n        }\r\n\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleFileSelected = (event) => {\r\n        console.log(event.target.files[0]);\r\n        this.setState({\r\n            selectedFile: event.target.files[0]\r\n        })\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<AddSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-add-student-step\">\r\n\r\n            <form className=\"teacher-student-creation-container\" onSubmit={this.handleValidate}>\r\n                <select onChange={this.handleUpdateList} className=\"teacher-student-creation-input\" id=\"selected-theChapter\">\r\n                    <option className=\"teacher-student-creation-option\" value=\"empty\">Choix du Chapitre</option>\r\n                    {this.state.chaptersList.map((theChapter, index) => {\r\n                        return <option key={index} value={theChapter.chapterID}>{theChapter.name}</option>\r\n                    })}\r\n                </select>\r\n                <select onChange={this.handleUpdateQuizList} className=\"teacher-student-creation-input\" id=\"selected-theQuiz\">\r\n                    <option className=\"teacher-student-creation-option\" value=\"empty\">Choix du Quiz</option>\r\n                    <option className=\"teacher-student-creation-option\" value=\"noQuiz\">Aucun Quiz</option>\r\n                    {this.state.quizList.map((theQuiz, index) => {\r\n                        return <option key={index} value={theQuiz.quizID}>{theQuiz.quizName}</option>\r\n                    })}\r\n                </select>\r\n\r\n                <h1 className=\"teacher-question-creation-text\">Création Question</h1>\r\n\r\n                <input className=\"teacher-student-creation-input\" id=\"select-qNumber\" placeholder=\"Numéro de question\" type=\"text\"/>\r\n                <input className=\"teacher-student-creation-input\" id=\"select-upperText\" placeholder=\"Texte du haut\" type=\"text\"/>\r\n                <input onChange={this.handleFileSelected} className=\"teacher-student-creation-input\" id=\"select-image\" placeholder=\"Image\" type=\"file\"/>\r\n                <input className=\"teacher-student-creation-input\" id=\"select-lowerText\" placeholder=\"Texte du bas\" type=\"text\"/>\r\n                <input className=\"teacher-student-creation-input\" id=\"select-level\" placeholder=\"Difficulté\" type=\"text\"/>\r\n\r\n                <h1 className=\"teacher-question-creation-text\">Création Réponse</h1>\r\n\r\n                <div className=\"teacher-question-creation-answer\">\r\n                    <input className=\"teacher-student-creation-input-answer\" id=\"select-textAnswer\" placeholder=\"Réponse\" type=\"text\"/>\r\n                    <div className=\"teacher-question-creation-answer-valid\" id=\"toggle-switch\" onClick={this.handleSwitch}>\r\n                        <h2 className=\"teacher-question-creation-answer-is-valid-text\" id=\"select-isValidAnswer\">Vrai</h2>\r\n                    </div>\r\n                    <input onClick={this.handleAddAnswer} className=\"teacher-question-creation-answer-addButton\" type=\"button\" value=\"+\"/>\r\n\r\n                </div>\r\n\r\n                <div className=\"teacher-question-creation-answer-list\">\r\n                    {this.state.answerList.map( (theAnswer, index) => {\r\n                        return <AnswersRow id={theAnswer.answerID} value={theAnswer} onClick={this.handleDeleteAnswer} key={index} theAnswer={theAnswer}/>\r\n                 })}\r\n                </div>\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <input className=\"teacher-student-creation-valid\" type=\"submit\" value=\"Valider\"/>\r\n            </form>\r\n\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nclass AnswersRow extends Component{\r\n\r\n    handleClick = (event) => {\r\n        this.props.onClick(event,this.props.theAnswer)\r\n    }\r\n\r\n    render() {\r\n        return <div onClick={this.handleClick} id={this.props.id} className=\"teacher-chapter-row\">\r\n            <h1 className=\"teacher-chapter-row-title\">{this.props.theAnswer.answerText}</h1>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n//////////////////////////////////| ADDING QUIZ |////////////////////////////////////\r\n\r\nclass AddQuizStep extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentChapter: 0,\r\n            chaptersList: [],\r\n            isOrder: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getChapter()\r\n    }\r\n\r\n    getChapter = () =>{\r\n        getAllChapter().then((response) => {\r\n\r\n            this.setState({\r\n                chaptersList:response.data.chapters\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    handleSwitch = () => {\r\n        let isOrder = document.getElementById(\"toggle-switch\")\r\n\r\n        if(isOrder && isOrder.style.backgroundColor === \"var(--secondary_color)\"){\r\n            isOrder.style.backgroundColor = \"var(--primary_color)\"\r\n            this.setState({\r\n                isOrder: true\r\n            })\r\n        }else{\r\n            isOrder.style.backgroundColor = \"var(--secondary_color)\"\r\n            this.setState({\r\n                isOrder: false\r\n            })\r\n        }\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        let valid = true;\r\n        let name = document.getElementById(\"select-name\").value\r\n        let isOrder = '1';\r\n\r\n\r\n        if(name === \"\"){\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Nom - obligatoire!\")\r\n        }\r\n\r\n        if(this.state.isOrder){\r\n            isOrder = '1'\r\n        }else if(!this.state.isOrder){\r\n            isOrder = '0'\r\n        }else{\r\n            valid = false;\r\n        }\r\n\r\n        if(this.state.currentChapter === null){\r\n            valid = false;\r\n            //TODO custom message error\r\n            alert(\"Chapitre - obligatoire!\")\r\n        }\r\n\r\n        console.log(name,this.state.currentChapter,isOrder)\r\n        if(valid){\r\n            createQuiz(name,this.state.currentChapter,isOrder).then((res) => {\r\n                console.log(res)\r\n            })\r\n        }\r\n\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleUpdateList = (event) => {\r\n\r\n        getAllChapter((event) ? event.target.value : this.state.currentChapter).then(res => {\r\n\r\n            this.setState({\r\n                chaptersList: res.data.chapters,\r\n                currentChapter: (event) ? event.target.value : this.state.currentChapter\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<AddSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-add-student-step\">\r\n\r\n            <form className=\"teacher-student-creation-container\" onSubmit={this.handleValidate}>\r\n\r\n                <input className=\"teacher-student-creation-input\" id=\"select-name\" placeholder=\"Nom\" type=\"text\"/>\r\n\r\n                <select onChange={this.handleUpdateList} className=\"teacher-student-creation-input\" id=\"selected-class\">\r\n                    <option className=\"teacher-student-creation-option\" value=\"empty\">Choix du Chapitre</option>\r\n                    {this.state.chaptersList.map((theChapter, index) => {\r\n                        return <option key={index} value={theChapter.chapterID}>{theChapter.name}</option>\r\n                    })}\r\n                </select>\r\n                <div className=\"teacher-question-creation-quiz-order\" id=\"toggle-switch\" onClick={this.handleSwitch}>\r\n                    <h2 className=\"teacher-question-creation-answer-is-valid-text\" id=\"select-isValidAnswer\">Est Ordonné</h2>\r\n                </div>\r\n\r\n                <br/>\r\n                <br/>\r\n\r\n                <input className=\"teacher-student-creation-valid\" type=\"submit\" value=\"Valider\"/>\r\n            </form>\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\search_display.js",["152","153","154","155"],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\edit_display.js",["156"],"import React, {Component} from \"react\";\r\nimport {getAllClasses, regenerateMap, updateTheClass} from \"../../../../../model/classModel\";\r\nimport {\r\n    getAllStudents,\r\n    regeneratePassword, updateStudentFirstName, updateStudentlastName,\r\n    updateStudentlogin\r\n} from \"../../../../../model/studentModel\";\r\n\r\n\r\nexport class EditDisplay extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStepScreen: <EditSelectStep openWaring={props.waringOpen} openError={props.errorOpen} previous={this.handlePrevious}\r\n                                               next={this.handleNext}/>\r\n        }\r\n\r\n    }\r\n\r\n\r\n    handleNext = (nextStepDOMObject) => {\r\n        this.setState({\r\n            currentStepScreen: nextStepDOMObject\r\n        })\r\n    }\r\n\r\n    handlePrevious = (previousDomObject) => {\r\n        this.setState({\r\n            currentStepScreen: previousDomObject\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return <div className=\"teacher-default-dashboard-container\">\r\n\r\n            <div className=\"teacher-adding-step-container\">\r\n                {this.state.currentStepScreen}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\nclass EditSelectStep extends Component {\r\n\r\n    // static variables\r\n    STUDENT_TEXT = \"Un élève\"\r\n    CLASS_TEXT = \"Une classe\"\r\n    CHAPTER_TEXT = \"Un Chapitre\"\r\n    QUESTION_TEXT = \"Une Question\"\r\n    QUIZ_TEXT = \"Un Quiz\"\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentChoice: \"\",\r\n            currentChoiceDOM: null,\r\n\r\n        }\r\n    }\r\n\r\n    handleConfirmChoice = () => {\r\n\r\n        switch (this.state.currentChoice) {\r\n            case this.STUDENT_TEXT:\r\n\r\n                this.props.next(<EditStudentStep openPopup={this.props.openPopup} closePopup={this.props.closePopup}\r\n                                                 next={this.props.next} previous={this.props.previous}/>)\r\n                break\r\n            case this.CLASS_TEXT:\r\n\r\n                this.props.next(<EditClassStep openPopup={this.props.openPopup} closePopup={this.props.closePopup}\r\n                                               next={this.props.next} previous={this.props.previous}/>)\r\n                break\r\n            case this.CHAPTER_TEXT:\r\n\r\n                break\r\n            case this.QUESTION_TEXT:\r\n\r\n\r\n                break\r\n            case this.QUIZ_TEXT:\r\n\r\n\r\n                break\r\n            default:\r\n\r\n                this.props.openError(\"Aucun choix n'a été sectionné\")\r\n\r\n                break\r\n        }\r\n\r\n    }\r\n\r\n    handleSelectChoice = (event, text, id) => {\r\n        let domObject = document.getElementById(id);\r\n\r\n        if (!this.state.currentChoiceDOM) {\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM: domObject,\r\n                currentChoice: text\r\n            })\r\n        } else {\r\n            this.state.currentChoiceDOM.style.backgroundColor = \"var(--primary_color)\"\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM: domObject,\r\n                currentChoice: text\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"teacher-selection-container\">\r\n\r\n            <h1 className=\"teacher-add-choice-title\">Edition</h1>\r\n\r\n            <div className=\"teacher-selection-option-list\">\r\n                <SelectionChoice id=\"student\" onClick={this.handleSelectChoice} title={this.STUDENT_TEXT}/>\r\n                <SelectionChoice id=\"class\" onClick={this.handleSelectChoice} title={this.CLASS_TEXT}/>\r\n                <SelectionChoice id=\"chapter\" onClick={this.handleSelectChoice} title={this.CHAPTER_TEXT}/>\r\n                <SelectionChoice id=\"question\" onClick={this.handleSelectChoice} title={this.QUESTION_TEXT}/>\r\n                <SelectionChoice id=\"quiz\" onClick={this.handleSelectChoice} title={this.QUIZ_TEXT}/>\r\n\r\n            </div>\r\n\r\n            <button onClick={this.handleConfirmChoice} className=\"teacher-next-btn\">Suivant</button>\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass SelectionChoice extends Component {\r\n\r\n\r\n    handleClick = (event) => {\r\n        this.props.onClick(event, this.props.title, this.props.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div id={this.props.id} onClick={this.handleClick} className=\"teacher-selection-choice-container\">\r\n            <h1 className=\"teacher-selection-choice-text\">{this.props.title}</h1>\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n////////////////////////| EDIT STUDENT |//////////////////////////\r\n\r\nexport class EditStudentStep extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentStudent: null,\r\n            studentList: [],\r\n            currentClass: 0,\r\n            classesList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        getAllClasses().then(res => {\r\n            this.setState({\r\n                classesList: res.data.classes\r\n            })\r\n\r\n            getAllStudents(res.data.classes[0].classID).then(res => {\r\n\r\n                if (this.props.formCreate) {\r\n                    this.setState({\r\n                        studentList: res.data.students,\r\n                        currentClass: this.props.formCreate.theClass,\r\n                        currentStudent: this.props.formCreate.theStudent\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        studentList: res.data.students\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    handleDisplayOverView = (theStudent) => {\r\n        this.setState({\r\n            currentStudent: theStudent\r\n        })\r\n\r\n    }\r\n\r\n    handleUpdateList = (event) => {\r\n\r\n        getAllStudents((event) ? event.target.value : this.state.currentClass).then(res => {\r\n\r\n            this.setState({\r\n                studentList: res.data.students,\r\n                currentClass: (event) ? event.target.value : this.state.currentClass\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        let valid = true;\r\n        let selectedClass = this.state.currentClass\r\n        let login = document.getElementById(\"select-login\").value\r\n        let name = document.getElementById(\"select-name\").value\r\n        let firstname = document.getElementById(\"select-firstname\").value\r\n\r\n        if (selectedClass === \"empty\") {\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Aucunne classe selectionné\")\r\n        }\r\n\r\n        if (login.length < 4) {\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Login - taille minimum de 4\")\r\n        }\r\n\r\n        if (name === \"\") {\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Nom - obligatoire\")\r\n        }\r\n\r\n        if (firstname === \"\") {\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Prénom - obligatoire\")\r\n        }\r\n\r\n\r\n        if (valid) {\r\n            if(this.props.theStudent.login !== this.state.login) updateStudentlogin(selectedClass, (event) ? event.target.value : this.state.currentClass, login).then((response) => {\r\n\r\n                console.log(response)\r\n\r\n            })\r\n            if(this.props.theStudent.lastname !== this.state.lastname) updateStudentlastName(selectedClass, (event) ? event.target.value : this.state.currentClass, name).then((response) => {\r\n\r\n                console.log(response)\r\n\r\n            })\r\n            if(this.props.theStudent.firstname !== this.state.firstname) updateStudentFirstName(selectedClass, (event) ? event.target.value : this.state.currentClass, firstname).then((response) => {\r\n                console.log(response)\r\n            })\r\n        }\r\n\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleRegenerate = (event) => {\r\n\r\n        regeneratePassword(this.state.currentClass, this.state.currentStudent.data.login, this.state.currentStudent.data.lastname, this.state.currentStudent.data.firstname).then((res) => {\r\n            console.log(res)\r\n        })\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-default-dashboard-container\">\r\n\r\n            <div className=\"teacher-class-list-editStudent-overview\">\r\n\r\n                <select onChange={this.handleUpdateList} className=\"teacher-student-creation-input\" id=\"selected-class\">\r\n                    {this.state.classesList.map((theClass, index) => {\r\n                        return <option key={index} value={theClass.classID}>{theClass.name}</option>\r\n                    })}\r\n                </select>\r\n\r\n                {(this.state.studentList.length > 0) ? this.state.studentList.map((theStudent, index) => {\r\n                    console.log(theStudent)\r\n                    return <StudentRow onClick={this.handleDisplayOverView} value={theStudent}\r\n                                       callbackOverView={this.handleDisplayOverView} key={index}/>\r\n                }) : <h1 className=\"teacher-student-list-none\">Aucun Elève</h1>}\r\n\r\n            </div>\r\n\r\n            <div className=\"teacher-class-editStudent-overview\">\r\n\r\n                {(this.state.currentStudent) ? <StudentEditOverview theStudent={this.state.currentStudent}/> :\r\n                    <h1 className=\"teacher-no-class\">Aucun élève selectionné</h1>}\r\n\r\n            </div>\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-editStudent-btn\">Précédent</button>\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass StudentRow extends Component {\r\n\r\n\r\n    handleClick = () => {\r\n        this.props.onClick(this.props.value)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div onClick={this.handleClick} className=\"teacher-class-row\">\r\n            <h1 className=\"teacher-class-row-title\">{this.props.value.lastname}</h1>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nclass StudentEditOverview extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            login: \"\",\r\n            lastname: \"\",\r\n            firstname: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            login: this.props.theStudent.login,\r\n            lastname: this.props.theStudent.lastname,\r\n            firstname: this.props.theStudent.firstname\r\n        })\r\n    }\r\n\r\n    handleOnChangeLogin = (event) => {\r\n        this.setState({\r\n            login: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOnChangeName = (event) => {\r\n        this.setState({\r\n            lastname: event.target.value\r\n        })\r\n    }\r\n\r\n    handleOnChangeFirstname = (event) => {\r\n        this.setState({\r\n            firstname: event.target.value\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        this.setState({\r\n            login: nextProps.theStudent.login,\r\n            lastname: nextProps.theStudent.lastname,\r\n            firstname: nextProps.theStudent.firstname\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-edit-student-step\">\r\n\r\n            <form className=\"teacher-edit-creation-container\" onSubmit={this.handleValidate}>\r\n                <input onChange={this.handleOnChangeLogin} className=\"teacher-student-edit-input\" id=\"select-login\"\r\n                       placeholder=\"Login\" type=\"text\"\r\n                       value={this.state.login}/>\r\n                <input onChange={this.handleOnChangeName} className=\"teacher-student-edit-input\" id=\"select-name\"\r\n                       placeholder=\"Nom\" type=\"text\"\r\n                       value={this.state.lastname}/>\r\n                <input onChange={this.handleOnChangeFirstname} className=\"teacher-student-edit-input\"\r\n                       id=\"select-firstname\" placeholder=\"Prénom\" type=\"text\"\r\n                       value={this.state.firstname}/>\r\n                <button onClick={this.handleRegenerate} className=\"teacher-regenerate-btn\">Regénérer la mot de passe\r\n                </button>\r\n\r\n                <input className=\"teacher-student-creation-valid\" type=\"submit\" value=\"Valider\"/>\r\n            </form>\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\n////////////////////////| EDIT CHAPTER |//////////////////////////\r\n\r\n\r\n\r\n////////////////////////| EDIT CLASS |//////////////////////////\r\n\r\nclass EditClassStep extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentClass: {name: \"\", grade: \"\"},\r\n            classesList: []\r\n        }\r\n        this.handleUpdateList()\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        let valid = true;\r\n        let name = document.getElementById(\"select-name\").value\r\n        let grade = document.getElementById(\"select-grade\").value\r\n\r\n\r\n        if (name === \"\") {\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Nom - obligatoire!\")\r\n        }\r\n\r\n        if (grade === \"\") {\r\n            valid = false\r\n            //TODO custom message error\r\n            alert(\"Niveau - obligatoire!\")\r\n        }\r\n\r\n\r\n        if (valid) {\r\n            console.log(this.state.currentClass,name,grade)\r\n            updateTheClass(this.state.currentClass, name, grade).then((res) => {\r\n                console.log(res)\r\n            })\r\n        }\r\n\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<EditSelectStep previous={this.props.previous} next={this.props.next}/>)\r\n    }\r\n\r\n    handleRegenerate = (event) => {\r\n\r\n        regenerateMap(this.state.currentClass).then((res) => {\r\n            console.log(res)\r\n        })\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleOnChange = (event) => {\r\n        this.state.classesList.forEach((theClass) => {\r\n            console.log(event.target.value)\r\n            if (theClass.classID === event.target.value) {\r\n                console.log(\"allo\")\r\n                this.setState({\r\n                    currentClass:{name: theClass.name, grade:theClass.grade}\r\n                })\r\n            }\r\n        })\r\n        //no reload\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleUpdateList = () => {\r\n\r\n        getAllClasses().then(res => {\r\n            this.setState({\r\n                classesList: res.data.classes,\r\n                currentClass: res.data.classes[0]\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    handleOnChangeName = (event) => {\r\n        this.setState({\r\n            currentClass:{name: event.target.value}\r\n        })\r\n    }\r\n\r\n    handleOnChangeGrade = (event) => {\r\n        this.setState({\r\n            currentClass:{grade: event.target.value}\r\n        })\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        this.setState({\r\n            currentClass:{name: nextProps.currentClass.name,grade: nextProps.currentClass.grade}\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-add-student-step\">\r\n\r\n            <form className=\"teacher-student-creation-container\" onSubmit={this.handleValidate}>\r\n\r\n                <select onChange={this.handleOnChange} className=\"teacher-student-creation-input\" id=\"selected-class\">\r\n                    {this.state.classesList.map((theClass, index) => {\r\n                        return <option key={index} value={theClass.classID}>{theClass.name}</option>\r\n                    })}\r\n                </select>\r\n\r\n                <input onChange={this.handleOnChangeName} className=\"teacher-student-creation-input\" id=\"select-name\" placeholder=\"Nom\" type=\"text\"\r\n                       value={this.state.currentClass.name}/>\r\n                <input onChange={this.handleOnChangeGrade} className=\"teacher-student-creation-input\" id=\"select-grade\" placeholder=\"Niveau\" type=\"text\"\r\n                       value={this.state.currentClass.grade}/>\r\n                <input onClick={this.handleValidate} className=\"teacher-student-creation-valid\" type=\"submit\"\r\n                       value=\"Valider\"/>\r\n                <button onClick={this.handleRegenerate} className=\"teacher-regenerate-btn\">Regénéré la carte</button>\r\n            </form>\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\">Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\delete_display.js",["157","158","159","160","161"],"import React, {Component} from \"react\";\r\nimport {deleteClass, getAllClasses} from \"../../../../../model/classModel\";\r\nimport {getAllStudents,deleteTheStudents} from \"../../../../../model/studentModel\";\r\nimport {getAllChapter, deleteChapter} from \"../../../../../model/chapterModel\";\r\nimport {getQuizList, deleteQuiz, addQuestion, getQuestionList, deleteQuestion} from \"../../../../../model/quizModel\";\r\n\r\nexport class DeleteDisplay extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentStepScreen: <DeleteSelectStep openWaring={props.waringOpen} openError={props.errorOpen} previous={this.handlePrevious} next={this.handleNext}/>\r\n        }\r\n\r\n    }\r\n\r\n\r\n    handleNext = (nextStepDOMObject) => {\r\n        this.setState({\r\n            currentStepScreen: nextStepDOMObject\r\n        })\r\n    }\r\n\r\n    handlePrevious = (previousDomObject) => {\r\n        this.setState({\r\n            currentStepScreen: previousDomObject\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return <div className=\"teacher-default-dashboard-container\">\r\n\r\n            <div className=\"teacher-adding-step-container\">\r\n                {this.state.currentStepScreen}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\nclass DeleteSelectStep extends Component{\r\n\r\n    // static variables\r\n    STUDENT_TEXT = \"Un élève\"\r\n    CLASS_TEXT = \"Une classe\"\r\n    CHAPTER_TEXT = \"Un Chapitre\"\r\n    QUESTION_TEXT = \"Une Question\"\r\n    QUIZ_TEXT = \"Un Quiz\"\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentChoice: \"\",\r\n            currentChoiceDOM:null,\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    handleConfirmChoice = () => {\r\n\r\n        switch (this.state.currentChoice) {\r\n            case this.STUDENT_TEXT:\r\n\r\n                this.props.next(<DeleteStudentStep openPopup={this.props.openPopup} closePopup={this.props.closePopup} next={this.props.next} previous={this.props.previous}/>)\r\n                break\r\n            case this.CLASS_TEXT:\r\n\r\n                this.props.next(<DeleteClassStep openPopup={this.props.openPopup} closePopup={this.props.closePopup}  next={this.props.next} previous={this.props.previous} />)\r\n                break\r\n            case this.CHAPTER_TEXT:\r\n\r\n                this.props.next(<DeleteChapterStep openPopup={this.props.openPopup} closePopup={this.props.closePopup}  next={this.props.next} previous={this.props.previous} />)\r\n                break\r\n            case this.QUESTION_TEXT:\r\n\r\n                this.props.next(<DeleteQuestionStep openPopup={this.props.openPopup} closePopup={this.props.closePopup}  next={this.props.next} previous={this.props.previous} />)\r\n                break\r\n            case this.QUIZ_TEXT:\r\n\r\n                this.props.next(<DeleteQuizStep openPopup={this.props.openPopup} closePopup={this.props.closePopup}  next={this.props.next} previous={this.props.previous} />)\r\n                break\r\n            default:\r\n\r\n                this.props.openError(\"Aucun choix n'a été sectionné\")\r\n\r\n                break\r\n        }\r\n\r\n    }\r\n\r\n    handleSelectChoice = (event, text,id) => {\r\n        let domObject = document.getElementById(id);\r\n        if(!this.state.currentChoiceDOM){\r\n\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM :domObject,\r\n                currentChoice: text\r\n            })\r\n        }else{\r\n            this.state.currentChoiceDOM.style.backgroundColor = \"var(--primary_color)\"\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM :domObject,\r\n                currentChoice: text\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return <div className=\"teacher-selection-container\">\r\n\r\n            <h1 className=\"teacher-add-choice-title\">Supprimer</h1>\r\n\r\n            <div className=\"teacher-selection-option-list\">\r\n                <SelectionChoice id=\"student\" onClick={this.handleSelectChoice} title={this.STUDENT_TEXT}  />\r\n                <SelectionChoice id=\"class\" onClick={this.handleSelectChoice} title={this.CLASS_TEXT} />\r\n                <SelectionChoice id=\"chapter\" onClick={this.handleSelectChoice} title={this.CHAPTER_TEXT} />\r\n                <SelectionChoice id=\"question\" onClick={this.handleSelectChoice} title={this.QUESTION_TEXT} />\r\n                <SelectionChoice id=\"quiz\" onClick={this.handleSelectChoice} title={this.QUIZ_TEXT} />\r\n\r\n            </div>\r\n\r\n            <button onClick={this.handleConfirmChoice} className=\"teacher-next-btn\" >Suivant</button>\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass SelectionChoice extends Component{\r\n\r\n\r\n    handleClick = (event) =>{\r\n        this.props.onClick(event, this.props.title, this.props.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div id={this.props.id} onClick={this.handleClick} className=\"teacher-selection-choice-container\">\r\n            <h1 className=\"teacher-selection-choice-text\">{this.props.title}</h1>\r\n        </div>\r\n    }\r\n\r\n\r\n}\r\n\r\n///////////////////////| DELETE STUDENT |/////////////////////////\r\n\r\nexport class DeleteStudentStep extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentStudent: null,\r\n            studentList: [],\r\n            currentClass: 0,\r\n            classesList: [],\r\n            selectedList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n\r\n        getAllClasses().then(res => {\r\n            this.setState({\r\n                classesList: res.data.classes\r\n            })\r\n\r\n            getAllStudents(res.data.classes[0].classID).then(res => {\r\n\r\n                if (this.props.formCreate) {\r\n                    this.setState({\r\n                        studentList: res.data.students,\r\n                        currentClass: this.props.formCreate.theClass.classID,\r\n                        currentStudent: this.props.formCreate.theStudent\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        studentList: res.data.students\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        let deleteList = \"\"\r\n\r\n\r\n\r\n        this.state.selectedList.forEach((theStudent) => {\r\n\r\n            deleteTheStudents(theStudent.userID,parseInt(this.state.currentClass)).then(res => {\r\n\r\n                if(res.data.returnState <1 ){\r\n                    getAllStudents(this.state.currentClass).then(results => {\r\n\r\n                        this.setState({\r\n                            studentList: results.data.students,\r\n                            selectedList:[]\r\n                        })\r\n\r\n\r\n                    })\r\n                }else {\r\n\r\n                    }\r\n\r\n            })\r\n        })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    handleDisplayOverView = (theStudent) => {\r\n        this.setState({\r\n            currentStudent: theStudent\r\n        })\r\n    }\r\n\r\n    handleUpdateList = (event) => {\r\n\r\n        getAllStudents(event.target.value).then(res => {\r\n\r\n            this.setState({\r\n                studentList: res.data.students,\r\n                currentClass: event.target.value\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    handleUpdateListByID = (id) => {\r\n\r\n        getAllStudents(id).then(res => {\r\n\r\n            this.setState({\r\n                studentList: res.data.students,\r\n                currentClass: id\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    handleSelect = (event,id, student) =>{\r\n\r\n        let container = document.getElementById(id);\r\n\r\n        console.log(event.target)\r\n\r\n        if((container.style.backgroundColor === \"var(--primary_color)\" || !container.style.backgroundColor) && id === event.target.id){\r\n            container.style.backgroundColor = \"var(--secondary_color)\"\r\n            this.state.selectedList.push(student)\r\n        }else{\r\n            container.style.backgroundColor = \"var(--primary_color)\"\r\n            this.setState({\r\n                selectedList: this.state.selectedList.filter(function(aStudent, index, arr){\r\n                    return aStudent !== student;\r\n                })\r\n                }\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<DeleteSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-default-dashboard-container\">\r\n\r\n            <div className=\"teacher-students-list-overview\">\r\n\r\n                <select onChange={this.handleUpdateList} className=\"teacher-student-creation-input\" id=\"selected-class\">\r\n                    {this.state.classesList.map((theClass, index) => {\r\n                        return <option key={index} value={theClass.classID}>{theClass.name}</option>\r\n                    })}\r\n                </select>\r\n\r\n                {(this.state.studentList.length > 0)?this.state.studentList.map( (theStudent, index) => {\r\n                    return <StudentRow id={\"student:\"+theStudent.userID+\":\"+index} onClick={this.handleSelect} value={theStudent} key={index}/>\r\n                }):<h1 className=\"teacher-student-list-none\">Aucun Elève</h1>}\r\n\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n\r\n            </div>\r\n            <button className=\"teacher-student-valid-delete-btn\" onClick={this.handleValidate} >Supprimer</button>\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nclass StudentRow extends Component {\r\n\r\n\r\n    handleClick = (event) => {\r\n        this.props.onClick(event,this.props.id,this.props.value)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div id={this.props.id} onClick={this.handleClick} className=\"teacher-student-row\">\r\n            <h1 className=\"teacher-student-row-title\">{this.props.value.lastname}</h1>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n///////////////////////| DELETE CLASS |///////////////////////////\r\n\r\nclass DeleteClassStep extends Component{\r\n\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentChoiceDOM:null,\r\n            currentClassID:-1,\r\n            classesList: []\r\n        }\r\n    }\r\n\r\n    handleGetClasses = () => {\r\n\r\n        getAllClasses().then((response) => {\r\n\r\n            this.setState({\r\n                classesList:response.data.classes\r\n            })\r\n\r\n        })\r\n\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleGetClasses()\r\n    }\r\n\r\n\r\n    handleSelectChoice = (event, classId,id) => {\r\n        let domObject = document.getElementById(id);\r\n        if(!this.state.currentChoiceDOM){\r\n\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM :domObject,\r\n                currentClassID: classId\r\n            })\r\n        }else{\r\n            this.state.currentChoiceDOM.style.backgroundColor = \"var(--primary_color)\"\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM :domObject,\r\n                currentClassID: classId\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        deleteClass(this.state.currentClassID).then(res => {\r\n            console.log(res)\r\n            this.handleGetClasses()\r\n        })\r\n\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<DeleteSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-add-student-step\">\r\n\r\n\r\n            <div className=\"teacher-class-list-delete\">\r\n\r\n                {this.state.classesList.map( (theClass, index) => {\r\n                    return <ClassesRow id={\"class\"+theClass.name+index} value={theClass} onClick={this.handleSelectChoice} key={index} theClass={theClass}/>\r\n                })}\r\n\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n\r\n            </div>\r\n\r\n            <button className=\"teacher-class-valid-delete-btn\" onClick={this.handleValidate} >Supprimer</button>\r\n\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nclass ClassesRow extends Component{\r\n\r\n    handleOpen = (event) => {\r\n        this.props.onClick(event,this.props.theClass.classID,this.props.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div id={this.props.id} onClick={this.handleOpen} className=\"teacher-class-row\">\r\n            <h1 className=\"teacher-class-row-title\">{this.props.theClass.name}</h1>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n///////////////////////| DELETE CHAPTER |/////////////////////////\r\n\r\nclass DeleteChapterStep extends Component{\r\n\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentChoiceDOM:null,\r\n            currentChapterID:-1,\r\n            chaptersList: []\r\n        }\r\n    }\r\n\r\n    handleGetChapters = () => {\r\n\r\n        getAllChapter().then((response) => {\r\n\r\n            console.log(response)\r\n            this.setState({\r\n                chaptersList:response.data.chapters\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleGetChapters()\r\n    }\r\n\r\n\r\n    handleSelectChoice = (event, chapterId,id) => {\r\n        let domObject = document.getElementById(id);\r\n        if(!this.state.currentChoiceDOM){\r\n\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM :domObject,\r\n                currentChapterID: chapterId\r\n            })\r\n        }else{\r\n            this.state.currentChoiceDOM.style.backgroundColor = \"var(--primary_color)\"\r\n            domObject.style.backgroundColor = \"var(--secondary_color)\"\r\n\r\n            this.setState({\r\n                currentChoiceDOM :domObject,\r\n                currentChapterID: chapterId\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        deleteChapter(this.state.currentChapterID).then(res => {\r\n            console.log(res)\r\n            this.handleGetChapters()\r\n        })\r\n\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<DeleteSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-add-student-step\">\r\n\r\n\r\n            <div className=\"teacher-chapter-list-delete\">\r\n\r\n                {this.state.chaptersList.map( (theChapter, index) => {\r\n                    return <ChaptersRow id={\"chapter\"+theChapter.name+index} value={theChapter} onClick={this.handleSelectChoice} key={index} theChapter={theChapter}/>\r\n                })}\r\n\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n\r\n            </div>\r\n\r\n            <button className=\"teacher-chapter-valid-delete-btn\" onClick={this.handleValidate} >Supprimer</button>\r\n\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\nclass ChaptersRow extends Component{\r\n\r\n\r\n\r\n    handleOpen = (event) => {\r\n        this.props.onClick(event,this.props.theChapter.chapterID,this.props.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div id={this.props.id} onClick={this.handleOpen} className=\"teacher-chapter-row\">\r\n            <h1 className=\"teacher-chapter-row-title\">{this.props.theChapter.name}</h1>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n///////////////////////| DELETE QUESTION |/////////////////////////\r\nexport class DeleteQuestionStep extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentQuestion: null,\r\n            questionList: [],\r\n            currentChapter: 0,\r\n            chapterList: [],\r\n            currentQuiz: 0,\r\n            quizList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        getAllChapter().then(res => {\r\n            this.setState({\r\n                chapterList: res.data.chapters,\r\n            })\r\n\r\n            getQuizList(res.data.chapters[0].chapterID).then(result => {\r\n                this.setState({\r\n                    quizList: result.data.quizzes\r\n                })\r\n\r\n                if(result.data.quizzes.length > 0) {\r\n                    getQuestionList(result.data.quizzes[0].quizID).then(resul => {\r\n\r\n                        this.setState({\r\n                            questionList: resul.data.questions\r\n                        })\r\n                    })\r\n                }else{\r\n                    this.setState({\r\n                        questionList: []\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    handleDisplayOverView = (theQuestion) => {\r\n        this.setState({\r\n            currentQuestion: theQuestion\r\n        })\r\n\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n        console.log(this.state.currentQuestion.questionID,this.state.currentQuiz)\r\n        deleteQuestion(this.state.currentQuestion.questionID,this.state.currentQuiz).then(res => {\r\n            console.log(res)\r\n            this.handleGetQuestion()\r\n        })\r\n\r\n    }\r\n\r\n    handleGetQuestion = () => {\r\n\r\n        getQuestionList(this.state.currentQuiz).then((response) => {\r\n            console.log(response)\r\n            this.setState({\r\n                questionList: response.data.questions\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n    handleUpdateChapterList = (event) => {\r\n\r\n        getAllChapter().then(res => {\r\n            this.setState({\r\n                chapterList: res.data.chapters,\r\n                currentChapter: event.target.value,\r\n            })\r\n\r\n            getQuizList(event.target.value).then(result => {\r\n                this.setState({\r\n                    quizList: result.data.quizzes\r\n                })\r\n                if(result.data.quizzes.length > 0) {\r\n                    getQuestionList(result.data.quizzes[0].quizID).then(res => {\r\n                        this.setState({\r\n                            questionList: res.data.questions,\r\n                            currentQuiz: result.data.quizzes[0].quizID\r\n                        })\r\n                    })\r\n                }else{\r\n                    this.setState({\r\n                        questionList: []\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    handleUpdateQuestionList = (event) => {\r\n\r\n        this.setState({\r\n            currentQuiz: event.target.value\r\n        })\r\n        getQuestionList(event.target.value).then(res => {\r\n            console.log(res.data.questions)\r\n            this.setState({\r\n                questionList: res.data.questions,\r\n            })\r\n        })\r\n    }\r\n    \r\n    handlePrevious = () => {\r\n        this.props.previous(<DeleteSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"teacher-default-dashboard-container\">\r\n\r\n            <div className=\"teacher-chapter-list-delete\">\r\n\r\n                <select onChange={this.handleUpdateChapterList} className=\"teacher-student-creation-input\" id=\"selected-class\">\r\n                    {this.state.chapterList.map((theChapter, index) => {\r\n                        return <option key={index} value={theChapter.chapterID}>{theChapter.name}</option>\r\n                    })}\r\n                </select>\r\n                <select onChange={this.handleUpdateQuestionList} className=\"teacher-student-creation-input\" id=\"selected-class\">\r\n                    {this.state.quizList.map((theQuiz, index) => {\r\n                        return <option key={index} value={theQuiz.quizID}>{theQuiz.quizName}</option>\r\n                    })}\r\n                </select>\r\n\r\n                {(this.state.questionList.length > 0)?this.state.questionList.map( (theQuestion, index) => {\r\n                    return <QuestionRow onClick={this.handleDisplayOverView} value={theQuestion} key={index}/>\r\n                }):<h1 className=\"teacher-student-list-none\">Aucune Question</h1>}\r\n\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n\r\n            </div>\r\n\r\n            <button className=\"teacher-class-valid-delete-btn\" onClick={this.handleValidate} >Supprimer</button>\r\n\r\n\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nclass QuestionRow extends Component {\r\n\r\n\r\n    handleClick = () => {\r\n        this.props.onClick(this.props.value)\r\n    }\r\n\r\n    render() {\r\n        return <div onClick={this.handleClick} className=\"teacher-class-row\">\r\n            <h1 className=\"teacher-class-row-title\">Question : {this.props.value.qNumber}</h1>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n///////////////////////| DELETE STUDENT |/////////////////////////\r\n\r\nexport class DeleteQuizStep extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currentQuiz: null,\r\n            quizList: [],\r\n            currentChapter: 0,\r\n            chapterList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n\r\n        getAllChapter().then(res => {\r\n            this.setState({\r\n                chapterList: res.data.chapters\r\n            })\r\n\r\n            getQuizList(res.data.chapters[0].chapterID).then(res => {\r\n                if (this.props.formCreate) {\r\n                    this.setState({\r\n                        quizList: res.data.quizzes,\r\n                        currentChapter: this.props.formCreate.theChapter.chapterID,\r\n                        currentQuiz: this.props.formCreate.theQuiz\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        quizList: res.data.quizzes\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    handleValidate = (event) => {\r\n\r\n        deleteQuiz(this.state.currentQuiz.quizID).then(res => {\r\n\r\n            getQuizList(this.state.currentQuiz).then(res => {\r\n                this.setState({\r\n                    quizList: res.data.quizzes\r\n                })\r\n\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    handleDisplayOverView = (theQuiz) => {\r\n        this.setState({\r\n            currentQuiz: theQuiz\r\n        })\r\n    }\r\n\r\n    handleUpdateList = (event) => {\r\n\r\n        getQuizList(event.target.value).then(res => {\r\n\r\n            this.setState({\r\n                quizList: res.data.quizzes,\r\n                currentChapter: event.target.value\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    handleSelect = (event, quiz) =>{\r\n        this.setState({\r\n            currentQuiz: quiz\r\n        })\r\n    }\r\n\r\n    handlePrevious = () => {\r\n        this.props.previous(<DeleteSelectStep previous={this.props.previous} next={this.props.next} />)\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"teacher-default-dashboard-container\">\r\n\r\n            <div className=\"teacher-students-list-overview\">\r\n\r\n                <select onChange={this.handleUpdateList} className=\"teacher-student-creation-input\" id=\"selected-class\">\r\n                    {this.state.chapterList.map((theChapter, index) => {\r\n                        return <option key={index} value={theChapter.chapterID}>{theChapter.name}</option>\r\n                    })}\r\n                </select>\r\n\r\n                {(this.state.quizList.length > 0)?this.state.quizList.map( (theQuiz, index) => {\r\n                    return <QuizRow onClick={this.handleSelect} value={theQuiz} key={index}/>\r\n                }):<h1 className=\"teacher-student-list-none\">Aucun Quiz</h1>}\r\n\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n\r\n            </div>\r\n            <button className=\"teacher-student-valid-delete-btn\" onClick={this.handleValidate} >Supprimer</button>\r\n\r\n            <button onClick={this.handlePrevious} className=\"teacher-previous-btn\" >Précédent</button>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nclass QuizRow extends Component {\r\n\r\n\r\n    handleClick = (event) => {\r\n        this.props.onClick(event,this.props.value)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div onClick={this.handleClick} className=\"teacher-student-row\">\r\n            <h1 className=\"teacher-student-row-title\">{this.props.value.quizName}</h1>\r\n        </div>\r\n    }\r\n\r\n}","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\classModel.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\studentModel.js",["162"],"import Axios from \"axios\";\r\nimport {getAllClasses} from \"./classModel\";\r\n\r\n/**\r\n * get all the student of a class\r\n *\r\n * @return {Promise<AxiosResponse<any>>}\r\n */\r\nexport function getAllStudents(id){\r\n\r\n    return Axios.post('/api/classManagement/getStudents', {id})\r\n\r\n}\r\n\r\nexport function getAllTheStudents(){\r\n\r\n    return Axios.post('/api/classManagement/getAllStudents' )\r\n\r\n}\r\n\r\nexport function deleteTheStudents(studentId,classId){\r\n\r\n    return Axios.post('/api/classManagement/deleteStudent', {classId,studentId} )\r\n}\r\n\r\nexport function regeneratePassword(classId,login,lastname,firstname){\r\n\r\n    return Axios.post('/api/classManagement/regeneratePassword', {classID:classId, login:login, lastname:lastname, firstname:firstname} )\r\n\r\n}\r\n\r\nexport function updateStudentlogin(classId,studentId,newLogin){\r\n\r\n    return Axios.post('/api/classManagement/setLogin', {studentId:studentId, classId:classId,login:newLogin} )\r\n}\r\n\r\nexport function updateStudentlastName(classId,studentId,newLastName){\r\n\r\n    return Axios.post('/api/classManagement/setLogin', {studentId:studentId, classId:classId,lastname:newLastName} )\r\n}\r\n\r\nexport function updateStudentFirstName(classId,studentId,newFirstName){\r\n\r\n    return Axios.post('/api/classManagement/setLogin', {studentId:studentId, classId:classId,firstname:newFirstName} )\r\n}\r\n\r\n/**\r\n * create a student\r\n *\r\n * @returns {Promise<AxiosResponse<any>>}\r\n */\r\nexport function createStudent(classId, login, lastname, firstname ){\r\n    return  Axios.post('/api/classManagement/createStudent', {classId, login, lastname, firstname})\r\n}","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\chapterModel.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\model\\searchModel.js",[],"C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\ClassDisplay.js",["163","164","165"],"import React, {Component} from \"react\";\r\nimport '../../../styles/teacher_style.css';\r\nimport {StudentManagement} from \"./StudentManagement\";\r\nimport Axios from \"axios\";\r\nimport * as THREE from \"three\";\r\n\r\nexport class ClassDisplay extends Component{\r\n\r\n\r\n\r\n    constructor() {\r\n        super();\r\n\r\n\r\n    }\r\n\r\n\r\n    _isMounted = false\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true\r\n        document.title = \"Game Of Math\"\r\n\r\n        this.renderMap(null)\r\n    }\r\n\r\n\r\n    /**\r\n     * render a class's map\r\n     *\r\n     * @param displayClass the target class\r\n     */\r\n    renderMap = (displayClass) =>{\r\n\r\n        if(this.mount) {\r\n\r\n            Axios.get(\"/api/graphics/map\").then(r => {\r\n\r\n                const renderer = new THREE.WebGLRenderer();\r\n                renderer.setSize(document.getElementById(\"map\").innerWidth,document.getElementById(\"map\").innerHeight);\r\n                let camera = new THREE.PerspectiveCamera(80, document.getElementById(\"map\").innerWidth / document.getElementById(\"map\").innerHeight, 0.1, 1000);\r\n                let scene = new THREE.Scene();\r\n                scene.background = new THREE.Color(\"#000000\")\r\n                let mousePressed = false;\r\n                let rotateX = 0, rotateY = 0;\r\n                let scrolled = 100;\r\n                let camDistance = 0;\r\n                var center = new THREE.Vector3(0, 0, 0)\r\n                //VARS\r\n\r\n                //INPUTS\r\n                renderer.domElement.addEventListener(\"mousedown\", function (event) {\r\n                    mousePressed = true;\r\n                    if (event.shiftKey) rayCasting((event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1)\r\n                }, false)\r\n                renderer.domElement.addEventListener(\"mouseup\", function (event) {\r\n                    mousePressed = false;\r\n                }, false)\r\n                renderer.domElement.addEventListener(\"mousemove\", function (event) {\r\n                    if (mousePressed) {\r\n                        rotateX += event.movementX / 100;\r\n                        rotateY += event.movementY / 100;\r\n                    }\r\n                }, false)\r\n                document.addEventListener(\"wheel\", function (event) {\r\n                    scrolled -= event.deltaY\r\n                }, false)\r\n                //INPUTS\r\n\r\n                //METHODS\r\n\r\n                function rayCasting(mouseX, mouseY) {\r\n                    console.log(\"RayCasting\" + mouseX + \":\" + mouseY)\r\n                    let rayCaster = new THREE.Raycaster();\r\n                    rayCaster.setFromCamera(new THREE.Vector2(mouseX, mouseY), camera);\r\n\r\n                    let intersects = rayCaster.intersectObjects(scene.children);\r\n                    console.log(intersects)\r\n                    if (intersects[0]) {\r\n                        center = intersects[0].point\r\n                    }\r\n                }\r\n\r\n                //RENDERING METHOD\r\n                const animate = function () {\r\n                    requestAnimationFrame(animate);\r\n                    camDistance -= scrolled;\r\n                    camDistance = Math.max(20, camDistance)\r\n                    camDistance = Math.min(100, camDistance)\r\n                    camera.position.z = center.z - (camDistance * Math.cos(Math.PI / 4)) * Math.cos(rotateX)\r\n                    camera.position.x = center.x - (camDistance * Math.cos(Math.PI / 4)) * Math.sin(rotateX)\r\n                    camera.position.y = camDistance * Math.sin(Math.PI / 4) + 80\r\n                    camera.lookAt(center)\r\n                    scrolled = 0\r\n                    renderer.render(scene, camera);\r\n                }\r\n                //RENDERING METHOD\r\n\r\n                //DATA COMPUTATION\r\n                scene.clear();\r\n                let map = r.data\r\n                let triangles = map.vertices\r\n                for (let color of triangles) {\r\n                    let trianglesData = color[1]\r\n                    let trianglesColor = color[0]\r\n                    let geometry = new THREE.BufferGeometry()\r\n                    let pointsArray = new Float32Array(trianglesData.length * 3 * 3)\r\n                    for (let i = 0; i < trianglesData.length; i++) {\r\n                        for (let j = 0; j < trianglesData[i].length; j++) {\r\n                            pointsArray[i * 9 + j * 3] = trianglesData[i][j].x - map.sizeX / 2\r\n                            pointsArray[i * 9 + j * 3 + 1] = trianglesData[i][j].z\r\n                            pointsArray[i * 9 + j * 3 + 2] = trianglesData[i][j].y - map.sizeY / 2\r\n                        }\r\n                    }\r\n                    geometry.setAttribute('position', new THREE.BufferAttribute(pointsArray, 3));\r\n                    let material = new THREE.MeshBasicMaterial({color: trianglesColor, side: THREE.DoubleSide});\r\n                    let mesh = new THREE.Mesh(geometry, material)\r\n                    scene.add(mesh)\r\n                }\r\n                //DATA COMPUTATION\r\n\r\n                //ENVIRONMENT\r\n                const geometry = new THREE.PlaneGeometry(1000, 1000);\r\n                const material = new THREE.MeshBasicMaterial({color: 0x006994, side: THREE.DoubleSide});\r\n                geometry.rotateX(Math.PI / 2)\r\n                const plane = new THREE.Mesh(geometry, material);\r\n                plane.position.y = 79\r\n                scene.add(plane);\r\n                scene.fog = new THREE.FogExp2(\"#87ceeb\", 0.005)\r\n                scene.background = new THREE.Color(0x87ceeb)\r\n                //ENVIRONMENT\r\n\r\n                this.mount.appendChild(renderer.domElement);\r\n\r\n                //RENDERING\r\n                animate();\r\n            })\r\n\r\n\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return <div className=\"class-data-container\">\r\n            <label className=\"class-title-data\">{this.props.theClass.name}</label>\r\n            <img onClick={this.props.dispose} src={window.location.origin + \"/icons/delete-icon.png\"} className=\"class-close-btn\"/>\r\n            <div id=\"map\" className=\"class-map\" ref={ref => (this.mount = ref)} />\r\n            <StudentManagement theClass={this.props.theClass}/>\r\n        </div>\r\n\r\n\r\n    }\r\n\r\n\r\n}","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\StudentManagement.js",["166","167"],"import React, {Component} from \"react\";\r\nimport '../../../styles/teacher_style.css';\r\nimport {getAllStudents} from \"../../../../../model/studentModel\";\r\nexport class StudentManagement extends Component{\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n\r\n            studentListData:[],\r\n            studentListObject:[],\r\n            searchValue : \"\",\r\n\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.updateLists()\r\n\r\n    }\r\n\r\n    updateLists = () => {\r\n\r\n\r\n        getAllStudents(this.props.theClass.classID).then((res) => {\r\n\r\n            console.log(res)\r\n\r\n            this.setState({\r\n                studentListData : res.data.students\r\n            })\r\n\r\n\r\n            this.displayStudent()\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n    displayStudent = () => {\r\n\r\n        let items = []\r\n\r\n        this.state.studentListData.map((student, index) => {\r\n\r\n            if(this.passFilter(student,this.state.searchValue))\r\n            items.push(\r\n                <StudentInfo theStudent={student} key={index}/>\r\n            )\r\n\r\n        })\r\n\r\n        this.setState({\r\n            studentListData:items\r\n        })\r\n\r\n\r\n    }\r\n\r\n    passFilter = (theStudent, filter) => {\r\n\r\n        return (\r\n            filter === \"\" ||\r\n            theStudent.lastname.includes(filter) ||\r\n            theStudent.firstname.includes(filter) ||\r\n            theStudent.login.includes(filter)\r\n        )\r\n\r\n    }\r\n\r\n    handleSubmit = () => {\r\n\r\n\r\n\r\n    }\r\n\r\n    handleSearch = (event) => {\r\n        this.setState({\r\n            searchValue: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return <div className=\"student-list-container\">\r\n                <button onClick={null} className=\"add-class-button\">Ajouter</button>\r\n                <input value={this.state.searchValue} placeholder=\"rechercher...\" onChange={this.handleSearch} className=\"class-search-input\"/>\r\n                <div className=\"student-list\">\r\n                    {this.state.studentListObject}\r\n                </div>\r\n        </div>\r\n\r\n\r\n    }\r\n}\r\n\r\nclass StudentInfo extends Component{\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return <div className=\"student-info-container\">\r\n            <label className=\"student-name-lower\">{this.props.theStudent.firstname}  {this.props.theStudent.lastname}</label>\r\n        </div>\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass EditStudent extends Component{\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return <div>\r\n            <form onSubmit={null}>\r\n\r\n            </form>\r\n        </div>\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}","C:\\Users\\USER\\WebstormProjects\\GOM\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\teacher_components\\question_display.js",[],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":30,"column":17,"nodeType":"174","endLine":30,"endColumn":112},{"ruleId":"172","severity":1,"message":"173","line":137,"column":21,"nodeType":"174","endLine":137,"endColumn":108},{"ruleId":"172","severity":1,"message":"173","line":181,"column":17,"nodeType":"174","endLine":181,"endColumn":122},{"ruleId":"175","severity":1,"message":"176","line":182,"column":17,"nodeType":"174","endLine":182,"endColumn":73},{"ruleId":"172","severity":1,"message":"173","line":226,"column":13,"nodeType":"174","endLine":226,"endColumn":112},{"ruleId":"177","severity":1,"message":"178","line":36,"column":22,"nodeType":"179","messageId":"180","endLine":36,"endColumn":33},{"ruleId":"181","severity":1,"message":"182","line":65,"column":9,"nodeType":"183","endLine":65,"endColumn":29},{"ruleId":"181","severity":1,"message":"182","line":66,"column":9,"nodeType":"183","endLine":66,"endColumn":29},{"ruleId":"181","severity":1,"message":"182","line":67,"column":9,"nodeType":"183","endLine":67,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":68,"column":9,"nodeType":"183","endLine":68,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":69,"column":9,"nodeType":"183","endLine":69,"endColumn":35},{"ruleId":"181","severity":1,"message":"182","line":71,"column":9,"nodeType":"183","endLine":71,"endColumn":29},{"ruleId":"181","severity":1,"message":"182","line":72,"column":9,"nodeType":"183","endLine":72,"endColumn":51},{"ruleId":"181","severity":1,"message":"182","line":79,"column":13,"nodeType":"183","endLine":79,"endColumn":33},{"ruleId":"181","severity":1,"message":"182","line":80,"column":13,"nodeType":"183","endLine":80,"endColumn":33},{"ruleId":"181","severity":1,"message":"182","line":85,"column":9,"nodeType":"183","endLine":85,"endColumn":29},{"ruleId":"181","severity":1,"message":"182","line":91,"column":9,"nodeType":"183","endLine":91,"endColumn":29},{"ruleId":"181","severity":1,"message":"182","line":95,"column":9,"nodeType":"183","endLine":95,"endColumn":29},{"ruleId":"181","severity":1,"message":"182","line":100,"column":9,"nodeType":"183","endLine":100,"endColumn":19},{"ruleId":"184","severity":1,"message":"185","line":104,"column":21,"nodeType":"186","messageId":"187","endLine":104,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":106,"column":17,"nodeType":"183","endLine":106,"endColumn":27},{"ruleId":"181","severity":1,"message":"182","line":108,"column":17,"nodeType":"183","endLine":108,"endColumn":27},{"ruleId":"181","severity":1,"message":"182","line":110,"column":13,"nodeType":"183","endLine":110,"endColumn":23},{"ruleId":"184","severity":1,"message":"185","line":111,"column":27,"nodeType":"186","messageId":"187","endLine":111,"endColumn":29},{"ruleId":"181","severity":1,"message":"182","line":113,"column":17,"nodeType":"183","endLine":113,"endColumn":27},{"ruleId":"181","severity":1,"message":"182","line":115,"column":17,"nodeType":"183","endLine":115,"endColumn":27},{"ruleId":"181","severity":1,"message":"182","line":117,"column":13,"nodeType":"183","endLine":117,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":139,"column":13,"nodeType":"183","endLine":139,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":165,"column":17,"nodeType":"183","endLine":165,"endColumn":27},{"ruleId":"181","severity":1,"message":"182","line":166,"column":17,"nodeType":"183","endLine":166,"endColumn":27},{"ruleId":"177","severity":1,"message":"178","line":193,"column":70,"nodeType":"179","messageId":"180","endLine":193,"endColumn":81},{"ruleId":"181","severity":1,"message":"182","line":242,"column":9,"nodeType":"183","endLine":242,"endColumn":19},{"ruleId":"181","severity":1,"message":"182","line":260,"column":9,"nodeType":"183","endLine":260,"endColumn":34},{"ruleId":"181","severity":1,"message":"182","line":261,"column":9,"nodeType":"183","endLine":261,"endColumn":34},{"ruleId":"181","severity":1,"message":"182","line":266,"column":9,"nodeType":"183","endLine":266,"endColumn":19},{"ruleId":"181","severity":1,"message":"182","line":277,"column":9,"nodeType":"183","endLine":277,"endColumn":19},{"ruleId":"181","severity":1,"message":"182","line":282,"column":9,"nodeType":"183","endLine":282,"endColumn":19},{"ruleId":"181","severity":1,"message":"182","line":291,"column":9,"nodeType":"183","endLine":291,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":292,"column":9,"nodeType":"183","endLine":292,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":293,"column":9,"nodeType":"183","endLine":293,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":298,"column":9,"nodeType":"183","endLine":298,"endColumn":25},{"ruleId":"188","severity":1,"message":"189","line":3,"column":24,"nodeType":"190","messageId":"191","endLine":3,"endColumn":38},{"ruleId":"188","severity":1,"message":"192","line":3,"column":40,"nodeType":"190","messageId":"191","endLine":3,"endColumn":57},{"ruleId":"188","severity":1,"message":"193","line":4,"column":9,"nodeType":"190","messageId":"191","endLine":4,"endColumn":23},{"ruleId":"188","severity":1,"message":"194","line":6,"column":48,"nodeType":"190","messageId":"191","endLine":6,"endColumn":62},{"ruleId":"181","severity":1,"message":"182","line":134,"column":13,"nodeType":"183","endLine":134,"endColumn":46},{"ruleId":"188","severity":1,"message":"195","line":513,"column":13,"nodeType":"190","messageId":"191","endLine":513,"endColumn":18},{"ruleId":"188","severity":1,"message":"196","line":3,"column":9,"nodeType":"190","messageId":"191","endLine":3,"endColumn":20},{"ruleId":"188","severity":1,"message":"197","line":4,"column":9,"nodeType":"190","messageId":"191","endLine":4,"endColumn":21},{"ruleId":"198","severity":1,"message":"199","line":90,"column":9,"nodeType":"200","messageId":"201","endLine":121,"endColumn":10},{"ruleId":"198","severity":1,"message":"199","line":131,"column":9,"nodeType":"200","messageId":"201","endLine":158,"endColumn":10},{"ruleId":"181","severity":1,"message":"182","line":114,"column":13,"nodeType":"183","endLine":114,"endColumn":46},{"ruleId":"188","severity":1,"message":"202","line":5,"column":34,"nodeType":"190","messageId":"191","endLine":5,"endColumn":45},{"ruleId":"181","severity":1,"message":"182","line":114,"column":13,"nodeType":"183","endLine":114,"endColumn":46},{"ruleId":"188","severity":1,"message":"203","line":213,"column":13,"nodeType":"190","messageId":"191","endLine":213,"endColumn":23},{"ruleId":"181","severity":1,"message":"182","line":394,"column":13,"nodeType":"183","endLine":394,"endColumn":46},{"ruleId":"181","severity":1,"message":"182","line":505,"column":13,"nodeType":"183","endLine":505,"endColumn":46},{"ruleId":"188","severity":1,"message":"204","line":2,"column":9,"nodeType":"190","messageId":"191","endLine":2,"endColumn":22},{"ruleId":"205","severity":1,"message":"206","line":11,"column":5,"nodeType":"207","messageId":"208","endLine":15,"endColumn":6},{"ruleId":"188","severity":1,"message":"209","line":62,"column":25,"nodeType":"190","messageId":"191","endLine":62,"endColumn":32},{"ruleId":"172","severity":1,"message":"173","line":153,"column":13,"nodeType":"174","endLine":153,"endColumn":132},{"ruleId":"210","severity":1,"message":"211","line":48,"column":57,"nodeType":"212","messageId":"213","endLine":48,"endColumn":59},{"ruleId":"188","severity":1,"message":"214","line":120,"column":7,"nodeType":"190","messageId":"191","endLine":120,"endColumn":18},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'getAllStudents' is defined but never used.","Identifier","unusedVar","'getAllTheStudents' is defined but never used.","'StudentDisplay' is defined but never used.","'deleteQuestion' is defined but never used.","'image' is assigned a value but never used.","'EditDisplay' is defined but never used.","'ClassDisplay' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'addQuestion' is defined but never used.","'deleteList' is assigned a value but never used.","'getAllClasses' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'rotateY' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'EditStudent' is defined but never used.","no-global-assign","no-unsafe-negation"]