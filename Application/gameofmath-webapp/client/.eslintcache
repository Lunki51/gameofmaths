[{"C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\index.js":"1","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\model\\authentification.js":"2","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\model\\quizModel.js":"3","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\Main_view.js":"4","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\Map_display.js":"5","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\Login_display.js":"6","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\teacher_display.js":"7","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\global_components.js":"8","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\overlay_components\\chapters_overlay.js":"9","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\mapRender\\mapRenderer.js":"10"},{"size":224,"mtime":1610027077990,"results":"11","hashOfConfig":"12"},{"size":870,"mtime":1610046500141,"results":"13","hashOfConfig":"12"},{"size":2109,"mtime":1610046500141,"results":"14","hashOfConfig":"12"},{"size":5065,"mtime":1610046500142,"results":"15","hashOfConfig":"12"},{"size":9884,"mtime":1610115582953,"results":"16","hashOfConfig":"12"},{"size":2340,"mtime":1610027077995,"results":"17","hashOfConfig":"12"},{"size":644,"mtime":1610027077998,"results":"18","hashOfConfig":"12"},{"size":4626,"mtime":1610046500143,"results":"19","hashOfConfig":"12"},{"size":13796,"mtime":1610046500144,"results":"20","hashOfConfig":"12"},{"size":194,"mtime":1610027077991,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"bly69z",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\index.js",[],["47","48"],"C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\model\\authentification.js",[],"C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\model\\quizModel.js",[],"C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\Main_view.js",["49"],"import React, {Component} from 'react';\r\n\r\n//MODEL\r\nimport auth, {getType, isAuth} from \"../../model/authentification\";\r\n\r\nimport LoginView from \"./main_components/Login_display\";\r\nimport {MobileHeader, NavigationBar} from \"./main_components/components/global_components\";\r\nimport MapView from \"./main_components/Map_display\";\r\nimport Axios from \"axios\";\r\nimport {Quiz} from \"./overlay_components/chapters_overlay\";\r\nimport {TeacherDisplay} from \"./main_components/teacher_display\";\r\nimport {quitQuiz} from \"../../model/quizModel\";\r\n\r\n/**\r\n * @author ANtoine LE BORGNE\r\n *\r\n * create the main of the app\r\n */\r\nclass MainView extends Component {\r\n\r\n\r\n    _isMounted = false\r\n\r\n    constructor() {\r\n\r\n        super();\r\n\r\n\r\n        this.state = {\r\n\r\n            isLogged: () => {\r\n                isAuth()\r\n                    .then((res) => {\r\n                        return res.data.isLogged\r\n                    })\r\n            },\r\n            overlayComponent: null,\r\n            whatOnOverlay: \"\",\r\n            mapAccess: true,\r\n            who: \"\",\r\n            username: \"\",\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this._isMounted = true\r\n\r\n\r\n        //Check if the user is authenticated\r\n        isAuth()\r\n            .then((res) => {\r\n\r\n                if (this._isMounted) {\r\n                    if (res.data.returnState === 0) {\r\n                        if (res.data.isLogged === true) {\r\n                            document.title = \"Game Of Math\"\r\n                        }\r\n\r\n                        getType().then((response) => {\r\n\r\n                            if(response.data.returnState === 0){\r\n                                this.setState({\r\n                                    isLogged: res.data.isLogged,\r\n                                    who:response.data.type\r\n                                })\r\n                            }\r\n\r\n                        })\r\n\r\n\r\n                    }\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n\r\n    //HANDLER\r\n\r\n    /**\r\n     * handle submit button and redirect to the\r\n     * authentication handler\r\n     *\r\n     * @param event mostly onClick\r\n     */\r\n    handleLogin = (event) => {\r\n\r\n        //get input's form values\r\n        const username = event.target[0].value\r\n        const password = event.target[1].value\r\n\r\n        //check authentication\r\n        auth(username, password)\r\n            .then((response) => {\r\n                //if wrong password or login\r\n\r\n                if (response.data.returnState === 1) {\r\n                    //TODO put styled error message\r\n                    alert(response.data.msg)\r\n\r\n                } else if (response.data.returnState === 0) {\r\n                    isAuth()\r\n                        .then((res) => {\r\n                            if (res.data.returnState === 0) {\r\n                                document.title = \"Game Of Math\"\r\n                                this.setState({\r\n                                    isLogged: res.data.isLogged,\r\n                                    who: response.data.type\r\n                                })\r\n\r\n                            }\r\n                        })\r\n                }\r\n\r\n            })\r\n\r\n\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    /**\r\n     * handle the logout of the user\r\n     *\r\n     */\r\n    handleLogout = () => {\r\n\r\n        Axios.post(\"/api/user/logout\").then((res) => {\r\n\r\n            if (res.data.returnState === 0)\r\n                this.setState({\r\n                    isLogged: false\r\n                })\r\n        })\r\n    }\r\n\r\n    /**\r\n     *handle the quiz visibility\r\n     */\r\n    handleQuizDisplay = () => {\r\n\r\n        if (this.state.whatOnOverlay === \"quiz\") {\r\n\r\n            document.getElementById('quiz-btn').style.shadowfilter = \"none\"\r\n\r\n            this.setState({\r\n                overlayComponent: null,\r\n                whatOnOverlay: \"\"\r\n\r\n            })\r\n        } else {\r\n            document.getElementById('quiz-btn').style.shadowfilter = \"filter : drop-shadow(0px 0px 0px 3px #fff);\"\r\n            this.setState({\r\n                overlayComponent: <Quiz/>,\r\n                whatOnOverlay: \"quiz\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        if (this.state.isLogged === true) {\r\n            //the user is logged\r\n\r\n            if (this.state.who === \"student\") {\r\n\r\n                //user is a student\r\n                return <>\r\n\r\n                    <MobileHeader/>{/*appear only when mobile*/}\r\n                    <NavigationBar quiz={this.handleQuizDisplay} logout={this.handleLogout}/>\r\n                    <MapView/>\r\n                    {this.state.overlayComponent}\r\n                </>\r\n\r\n            } else {\r\n\r\n                //user is a teacher\r\n                return <TeacherDisplay logout={this.handleLogout}/>\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            //the user is not logged\r\n            return <LoginView handleLogin={this.handleLogin}/>\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default MainView;","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\Map_display.js",["50","51"],"import React, {Component} from 'react';\r\nimport Axios from \"axios\";\r\nimport * as THREE from 'three'\r\nimport {GUI} from \"dat.gui\";\r\nimport {Water} from \"three/examples/jsm/objects/Water2\";\r\n\r\n\r\n/**\r\n * @author quentin COSNIER\r\n * @author Antoine LE BORGNE\r\n *\r\n * render map on the screen\r\n */\r\nclass MapView extends Component {\r\n\r\n    _isMounted = false\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true\r\n        document.title = \"Game Of Math\"\r\n\r\n        this.renderMap(null)\r\n    }\r\n\r\n\r\n    /**\r\n     * render a class's map\r\n     *\r\n     * @param displayClass the target class\r\n     */\r\n    renderMap = (displayClass) => {\r\n\r\n        if (this.mount) {\r\n\r\n            Axios.get(\"/api/graphics/map\").then(r => {\r\n\r\n                const renderer = new THREE.WebGLRenderer();\r\n                renderer.setSize(window.innerWidth, window.innerHeight);\r\n                let camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n                renderer.outputEncoding = THREE.sRGBEncoding;\r\n                renderer.shadowMap.enabled = true;\r\n                let scene = new THREE.Scene();\r\n                scene.background = new THREE.Color(\"#000000\")\r\n                let mousePressed = false;\r\n                let rotateX = 0, rotateY = 0;\r\n                let scrolled = 100;\r\n                let camDistance = 0;\r\n                var center = new THREE.Vector3(0, 0, 0)\r\n                //VARS\r\n\r\n                //INPUTS\r\n                renderer.domElement.addEventListener(\"mousedown\", function (event) {\r\n                    mousePressed = true;\r\n                    if (event.shiftKey) rayCasting((event.clientX / window.innerWidth) * 2 - 1, -(event.clientY / window.innerHeight) * 2 + 1)\r\n                }, false)\r\n                renderer.domElement.addEventListener(\"mouseup\", function (event) {\r\n                    mousePressed = false;\r\n                }, false)\r\n                renderer.domElement.addEventListener(\"mousemove\", function (event) {\r\n                    if (mousePressed) {\r\n                        rotateX += event.movementX / 100;\r\n                        rotateY += event.movementY / 100;\r\n                    }\r\n                }, false)\r\n                document.addEventListener(\"wheel\", function (event) {\r\n                    scrolled -= event.deltaY\r\n                }, false)\r\n                window.addEventListener(\"resize\", function (event) {\r\n                    renderer.setSize(window.innerWidth, window.innerHeight);\r\n                    camera = new THREE.PerspectiveCamera(80, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n                })\r\n                //INPUTS\r\n\r\n                //METHODS\r\n\r\n                function rayCasting(mouseX, mouseY) {\r\n                    console.log(\"RayCasting\" + mouseX + \":\" + mouseY)\r\n                    let rayCaster = new THREE.Raycaster();\r\n                    rayCaster.setFromCamera(new THREE.Vector2(mouseX, mouseY), camera);\r\n\r\n                    let intersects = rayCaster.intersectObjects(scene.children);\r\n                    console.log(intersects)\r\n                    if (intersects[0]) {\r\n                        center = intersects[0].point\r\n                    }\r\n                }\r\n\r\n\r\n                //RENDERING METHOD\r\n                const animate = function () {\r\n                    requestAnimationFrame(animate);\r\n                    camDistance -= scrolled;\r\n                    camDistance = Math.max(20, camDistance)\r\n                    camDistance = Math.min(100, camDistance)\r\n                    camera.position.z = center.z - (camDistance * Math.cos(Math.PI / 4)) * Math.cos(rotateX)\r\n                    camera.position.x = center.x - (camDistance * Math.cos(Math.PI / 4)) * Math.sin(rotateX)\r\n                    camera.position.y = camDistance * Math.sin(Math.PI / 4) + 80\r\n                    camera.lookAt(center)\r\n                    scrolled = 0\r\n                    renderer.render(scene, camera);\r\n\r\n\r\n                }\r\n                //RENDERING METHOD\r\n\r\n                //DATA COMPUTATION\r\n                scene.clear();\r\n                let map = r.data\r\n                let triangles = map.vertices\r\n                for (let color of triangles) {\r\n                    let trianglesData = color[1]\r\n                    let trianglesColor = color[0]\r\n                    let geometry = new THREE.BufferGeometry()\r\n                    let pointsArray = new Float32Array(trianglesData.length * 3 * 3)\r\n                    let normalsArray = new Float32Array(trianglesData.length * 3 * 3)\r\n                    for (let i = 0; i < trianglesData.length; i++) {\r\n                        let points = [];\r\n                        for (let j = 0; j < trianglesData[i].length; j++) {\r\n                            points[j] = new THREE.Vector3(trianglesData[i][j].x - map.sizeX / 2, trianglesData[i][j].z, Math.round(trianglesData[i][j].y*100)/100 - map.sizeY / 2)\r\n                            pointsArray[i * 9 + j * 3] = points[j].x\r\n                            pointsArray[i * 9 + j * 3 + 1] = points[j].y\r\n                            pointsArray[i * 9 + j * 3 + 2] = points[j].z\r\n                        }\r\n                        let ab = new THREE.Vector3()\r\n                        let cb = new THREE.Vector3()\r\n                        ab.subVectors(points[0], points[1])\r\n                        cb.subVectors(points[2], points[1])\r\n                        cb.cross(ab)\r\n                        cb.normalize()\r\n                        for (let j = 0; j < 3; j++) {\r\n                            normalsArray[i * 9 + j * 3] = cb.x\r\n                            normalsArray[i * 9 + j * 3 + 1] = cb.y\r\n                            normalsArray[i * 9 + j * 3 + 2] = cb.z\r\n                        }\r\n\r\n                    }\r\n                    console.table(pointsArray)\r\n                    geometry.setAttribute('normal', new THREE.BufferAttribute(normalsArray, 3))\r\n                    geometry.setAttribute('position', new THREE.BufferAttribute(pointsArray, 3));\r\n                    geometry.computeBoundingSphere()\r\n                    let material = new THREE.MeshLambertMaterial({color: trianglesColor});\r\n                    let mesh = new THREE.Mesh(geometry, material)\r\n                    mesh.castShadow = true;\r\n                    mesh.receiveShadow = true;\r\n                    scene.add(mesh)\r\n\r\n\r\n\r\n                }\r\n                //DATA COMPUTATION\r\n\r\n                //ENVIRONMENT\r\n                const geometry = new THREE.PlaneGeometry(1000, 1000);\r\n                let water = new Water(geometry,{color: 0x2389da,\r\n                    scale: 1000,\r\n                    flowDirection: new THREE.Vector2( 1, 1 ),\r\n                    textureWidth: 1024,\r\n                    textureHeight: 1024\r\n                } )\r\n                water.rotation.x = 3*Math.PI/2\r\n                water.position.y=80\r\n                scene.add(water);\r\n                scene.fog = new THREE.FogExp2(\"#8BA6BB\", 0.001)\r\n                scene.background = new THREE.Color(0x87ceeb)\r\n\r\n                let planeGeo = new THREE.PlaneBufferGeometry(1000, 1000);\r\n                let mat = new THREE.MeshBasicMaterial({color : 0xc2b280,side: THREE.DoubleSide })\r\n                let planeMesh = new THREE.Mesh(planeGeo,mat)\r\n                planeMesh.rotation.x = Math.PI/2\r\n                planeMesh.position.y  = 0\r\n                scene.add(planeMesh)\r\n\r\n\r\n                const dirLight = new THREE.DirectionalLight(0xffffff, 1);\r\n                dirLight.color.setHSL(0.1, 1, 0.95);\r\n                dirLight.position.multiplyScalar(30);\r\n                scene.add(dirLight);\r\n\r\n                dirLight.castShadow = true;\r\n\r\n                dirLight.shadow.mapSize.width = 2048;\r\n                dirLight.shadow.mapSize.height = 2048;\r\n\r\n                const d = 50;\r\n\r\n                dirLight.shadow.camera.left = -d;\r\n                dirLight.shadow.camera.right = d;\r\n                dirLight.shadow.camera.top = d;\r\n                dirLight.shadow.camera.bottom = -d;\r\n\r\n                dirLight.shadow.camera.far = 1000;\r\n                dirLight.shadow.bias = -0.0001;\r\n\r\n                const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\r\n                scene.add(dirLightHelper);\r\n\r\n                const light = new THREE.PointLight(0xffffff,1)\r\n                scene.add(light)\r\n\r\n                const loader = new THREE.CubeTextureLoader();\r\n                loader.setPath( 'mapData/texture/' );\r\n\r\n                const textureCube = loader.load( [\r\n                    'right.png', 'left.png',\r\n                    'top.png', 'bottom.png',\r\n                    'center.png', 'back.png'\r\n                ] ,function(text){\r\n                    scene.background = text\r\n                });\r\n\r\n                const gui = new GUI()\r\n                const cubeFolder = gui.addFolder(\"Light\")\r\n                cubeFolder.add(water.position,\"x\",0,100,1)\r\n                cubeFolder.add(water.position,\"y\",0,100,1)\r\n                cubeFolder.add(water.position,\"z\",0,100,1)\r\n                cubeFolder.add(water.rotation,\"x\",-Math.PI*2,Math.PI*2,0.01)\r\n                cubeFolder.add(water.rotation,\"y\",-Math.PI*2,Math.PI*2,0.01)\r\n                cubeFolder.add(water.rotation,\"z\",-Math.PI*2,Math.PI*2,0.01)\r\n                cubeFolder.add(dirLight.position, \"y\", 0, 500, 1)\r\n                cubeFolder.add(dirLight, \"intensity\", 0, 100, 0.01)\r\n                cubeFolder.open()\r\n                //ENVIRONMENT\r\n\r\n                this.mount.appendChild(renderer.domElement);\r\n\r\n                //RENDERING\r\n                animate();\r\n            })\r\n\r\n\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div ref={ref => (this.mount = ref)}/>\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default MapView","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\Login_display.js",[],"C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\teacher_display.js",[],"C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\main_components\\components\\global_components.js",["52","53","54","55"],"import React, { Component } from 'react';\r\nimport \"../../styles/global_style.css\";\r\nimport {getUsername} from \"../../../../model/authentification\";\r\n\r\n\r\n//IMAGES\r\n\r\nconst image_icon_user =  \"https://img.icons8.com/material-outlined/35/eff0cf/user--v1.png\"\r\nconst image_icon_logout =  \"https://img.icons8.com/ios-filled/35/eff0cf/login-rounded-right.png\"\r\nconst image_icon_quiz =  \"https://img.icons8.com/ios/35/eff0cf/help.png\"\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * create a main container component\r\n */\r\nclass ContainerTitle extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.props = props;\r\n    }\r\n\r\n\r\n    render(){\r\n\r\n        return<>\r\n        \r\n            <div className={this.props.className}>\r\n                <h1 className=\"container-title\">{this.props.title}</h1>\r\n                {this.props.children}\r\n            </div>\r\n        \r\n        </>\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * create a text field component\r\n */\r\nclass TextField extends Component {\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.props = props;\r\n    }\r\n\r\n    render(){\r\n        return <>\r\n            <input id={this.props.id} onChange={this.props.onChange} value={this.props.value} className=\"textField\" placeholder={this.props.hint} type={this.props.type}/>\r\n        </>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * create a simple Button component\r\n */\r\nclass Button extends Component{\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.props = props;\r\n    }\r\n\r\n    render(){\r\n        return <>\r\n             <input className=\"button\" type=\"submit\" value={this.props.value} onClick={this.props.onClick}/> \r\n        </>\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * create the navigation bar\r\n */\r\nclass NavigationBar extends Component{\r\n\r\n\r\n    _isMounted = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props\r\n\r\n        this.state = {\r\n            username : \"\"\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this._isMounted = true;\r\n\r\n            //get the current username\r\n            getUsername().then((response) => {\r\n\r\n                    if(this._isMounted) {\r\n\r\n                        this.setState({\r\n                            username: response.data.username,\r\n                        })\r\n\r\n                    }\r\n                })\r\n\r\n    }\r\n\r\n\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n    }\r\n\r\n\r\n    render() {\r\n        return <NavBar>\r\n                    <NavElement icon={image_icon_quiz} id=\"quiz-btn\"  className=\"navElem_left\"   onClick={this.props.quiz} value=\"quiz\"/>\r\n                    <img src={window.location.origin + '/logo/game_of_math_logo.png'} className=\"navElem_center\"/>\r\n                    <NavElement icon={image_icon_user}  className=\"navElem_right\"  onClick={this.props.profile} value={this.state.username}/>\r\n                    <NavElement icon={image_icon_logout}  className=\"navElem_right\"  onClick={this.props.logout} value=\"deconnexion\"/>\r\n                </NavBar>\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * handle and display navbar\r\n */\r\nexport class NavBar extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n\r\n    render(){\r\n        return <>\r\n            <ul className=\"navbar_container\">\r\n                {this.props.children}\r\n            </ul>\r\n        </>\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @author Antoine LE BORGNE\r\n *\r\n * manage navigation element\r\n */\r\nexport class NavElement extends Component{\r\n\r\n\r\n\r\n    render() {\r\n        return <>\r\n            <li className={this.props.className}>\r\n\r\n                <img id={this.props.id} className=\"navbar_link_icon\" onClick={this.props.onClick} src={this.props.icon}/>\r\n                <a className=\"navbar_link\" onClick={this.props.onClick}>\r\n                    {this.props.value}\r\n                </a>\r\n            </li>\r\n        </>\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport class AlertComp extends Component{\r\n\r\n\r\n    render() {\r\n\r\n        return <div className=\"alert_container\">\r\n\r\n\r\n\r\n            <text >{this.props.msg}</text>\r\n\r\n            <button value=\"OK\" onClick={this.props.onClick}/>\r\n\r\n        </div>\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport class MobileHeader extends Component{\r\n\r\n    render() {\r\n\r\n        return <div className=\"mobile-header-container\">\r\n\r\n            <img src={window.location.origin + '/logo/game_of_math_logo.png'} className=\"mobile-header-title\"/>\r\n\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n//exportation\r\nexport {ContainerTitle, TextField, Button,NavigationBar};","C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\views\\main_view\\overlay_components\\chapters_overlay.js",[],"C:\\Users\\Lunki\\WebstormProjects\\gameofmaths-groupe-b\\Application\\gameofmath-webapp\\client\\src\\mapRender\\mapRenderer.js",[],["56","57"],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":12,"column":9,"nodeType":"64","messageId":"65","endLine":12,"endColumn":17},{"ruleId":"62","severity":1,"message":"66","line":62,"column":25,"nodeType":"64","messageId":"65","endLine":62,"endColumn":32},{"ruleId":"62","severity":1,"message":"67","line":203,"column":23,"nodeType":"64","messageId":"65","endLine":203,"endColumn":34},{"ruleId":"68","severity":1,"message":"69","line":137,"column":21,"nodeType":"70","endLine":137,"endColumn":115},{"ruleId":"68","severity":1,"message":"69","line":182,"column":17,"nodeType":"70","endLine":182,"endColumn":122},{"ruleId":"71","severity":1,"message":"72","line":183,"column":17,"nodeType":"70","endLine":183,"endColumn":73},{"ruleId":"68","severity":1,"message":"69","line":222,"column":13,"nodeType":"70","endLine":222,"endColumn":112},{"ruleId":"58","replacedBy":"73"},{"ruleId":"60","replacedBy":"74"},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'quitQuiz' is defined but never used.","Identifier","unusedVar","'rotateY' is assigned a value but never used.","'textureCube' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["75"],["76"],"no-global-assign","no-unsafe-negation"]